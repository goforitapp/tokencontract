"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../utils");
const rlp_1 = tslib_1.__importDefault(require("../eth-lib/rlp"));
const bytes_1 = tslib_1.__importDefault(require("../eth-lib/bytes"));
const hash_1 = tslib_1.__importDefault(require("../eth-lib/hash"));
const nat_1 = tslib_1.__importDefault(require("../eth-lib/nat"));
const account_1 = tslib_1.__importDefault(require("../eth-lib/account"));
const formatters_1 = require("../formatters");
function signTransaction(tx, privateKey, eth) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (!tx.gas) {
            throw new Error('gas is missing or 0');
        }
        // Resolve immediately if nonce, chainId and price are provided
        if (tx.nonce !== undefined && tx.chainId !== undefined && tx.gasPrice !== undefined) {
            return sign(tx, privateKey);
        }
        // Otherwise, get the missing info from the Ethereum Node
        const promises = [
            isNot(tx.chainId) ? eth.getId() : Promise.resolve(tx.chainId),
            isNot(tx.gasPrice) ? eth.getGasPrice() : Promise.resolve(tx.gasPrice),
            isNot(tx.nonce) ? eth.getTransactionCount(account_1.default.fromPrivate(privateKey).address) : Promise.resolve(tx.nonce),
        ];
        const [chainId, gasPrice, nonce] = yield Promise.all(promises);
        if (isNot(chainId) || isNot(gasPrice) || isNot(nonce)) {
            throw new Error('One of the values chainId, gasPrice, or nonce could not be fetched');
        }
        return sign(Object.assign({}, tx, { chainId, gasPrice, nonce }), privateKey);
    });
}
exports.signTransaction = signTransaction;
function recoverTransaction(rawTx) {
    var values = rlp_1.default.decode(rawTx);
    var signature = account_1.default.encodeSignature(values.slice(6, 9));
    var recovery = bytes_1.default.toNumber(values[6]);
    var extraData = recovery < 35 ? [] : [bytes_1.default.fromNumber((recovery - 35) >> 1), '0x', '0x'];
    var signingData = values.slice(0, 6).concat(extraData);
    var signingDataHex = rlp_1.default.encode(signingData);
    return account_1.default.recover(hash_1.default.keccak256(signingDataHex), signature);
}
exports.recoverTransaction = recoverTransaction;
function sign(tx, privateKey) {
    if (tx.nonce < 0 || tx.gas < 0 || tx.gasPrice < 0 || tx.chainId < 0) {
        throw new Error('gas, gasPrice, nonce or chainId is lower than 0');
    }
    tx = formatters_1.inputCallFormatter(tx);
    const transaction = tx;
    transaction.to = tx.to || '0x';
    transaction.data = tx.data || '0x';
    transaction.value = tx.value || '0x';
    transaction.chainId = utils_1.numberToHex(tx.chainId);
    const rlpEncoded = rlp_1.default.encode([
        bytes_1.default.fromNat(transaction.nonce),
        bytes_1.default.fromNat(transaction.gasPrice),
        bytes_1.default.fromNat(transaction.gas),
        transaction.to.toLowerCase(),
        bytes_1.default.fromNat(transaction.value),
        transaction.data,
        bytes_1.default.fromNat(transaction.chainId || '0x1'),
        '0x',
        '0x',
    ]);
    const messageHash = hash_1.default.keccak256(rlpEncoded);
    const signature = account_1.default.makeSigner(nat_1.default.toNumber(transaction.chainId || '0x1') * 2 + 35)(hash_1.default.keccak256(rlpEncoded), privateKey);
    const rawTx = rlp_1.default.decode(rlpEncoded)
        .slice(0, 6)
        .concat(account_1.default.decodeSignature(signature));
    rawTx[6] = makeEven(trimLeadingZero(rawTx[6]));
    rawTx[7] = makeEven(trimLeadingZero(rawTx[7]));
    rawTx[8] = makeEven(trimLeadingZero(rawTx[8]));
    const rawTransaction = rlp_1.default.encode(rawTx);
    const values = rlp_1.default.decode(rawTransaction);
    return {
        messageHash,
        v: trimLeadingZero(values[6]),
        r: trimLeadingZero(values[7]),
        s: trimLeadingZero(values[8]),
        rawTransaction,
    };
}
function isNot(value) {
    return value === undefined || value === null;
}
function trimLeadingZero(hex) {
    while (hex && hex.startsWith('0x0')) {
        hex = '0x' + hex.slice(3);
    }
    return hex;
}
function makeEven(hex) {
    if (hex.length % 2 === 1) {
        hex = hex.replace('0x', '0x0');
    }
    return hex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbi10cmFuc2FjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50L3NpZ24tdHJhbnNhY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsb0NBQXVDO0FBQ3ZDLGlFQUFpQztBQUNqQyxxRUFBcUM7QUFDckMsbUVBQW1DO0FBQ25DLGlFQUFpQztBQUNqQyx5RUFBeUM7QUFFekMsOENBQW1EO0FBYW5ELFNBQXNCLGVBQWUsQ0FBQyxFQUFNLEVBQUUsVUFBa0IsRUFBRSxHQUFROztRQUN4RSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUN4QztRQUVELCtEQUErRDtRQUMvRCxJQUFJLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEtBQUssU0FBUyxJQUFJLEVBQUUsQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ25GLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUM3QjtRQUVELHlEQUF5RDtRQUN6RCxNQUFNLFFBQVEsR0FBRztZQUNmLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQzdELEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ3JFLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBTyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQy9HLENBQUM7UUFFRixNQUFNLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFL0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7U0FDdkY7UUFFRCxPQUFPLElBQUksbUJBQU0sRUFBRSxJQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxLQUFJLFVBQVUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7Q0FBQTtBQXhCRCwwQ0F3QkM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFhO0lBQzlDLElBQUksTUFBTSxHQUFHLGFBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsSUFBSSxTQUFTLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLFFBQVEsR0FBRyxlQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLElBQUksU0FBUyxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxRixJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsSUFBSSxjQUFjLEdBQUcsYUFBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFPLENBQUMsT0FBTyxDQUFDLGNBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQVJELGdEQVFDO0FBRUQsU0FBUyxJQUFJLENBQUMsRUFBTSxFQUFFLFVBQWtCO0lBQ3RDLElBQUksRUFBRSxDQUFDLEtBQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQVEsR0FBRyxDQUFDLEVBQUU7UUFDdEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ3BFO0lBRUQsRUFBRSxHQUFHLCtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRTVCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUN2QixXQUFXLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDO0lBQy9CLFdBQVcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7SUFDbkMsV0FBVyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQztJQUNyQyxXQUFXLENBQUMsT0FBTyxHQUFHLG1CQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTlDLE1BQU0sVUFBVSxHQUFHLGFBQUcsQ0FBQyxNQUFNLENBQUM7UUFDNUIsZUFBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2hDLGVBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUNuQyxlQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7UUFDOUIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7UUFDNUIsZUFBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ2hDLFdBQVcsQ0FBQyxJQUFJO1FBQ2hCLGVBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUM7UUFDM0MsSUFBSTtRQUNKLElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxNQUFNLFdBQVcsR0FBRyxjQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRS9DLE1BQU0sU0FBUyxHQUFHLGlCQUFPLENBQUMsVUFBVSxDQUFDLGFBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQ3ZGLGNBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEVBQzFCLFVBQVUsQ0FDWCxDQUFDO0lBRUYsTUFBTSxLQUFLLEdBQUcsYUFBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDakMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDWCxNQUFNLENBQUMsaUJBQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUU5QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9DLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUvQyxNQUFNLGNBQWMsR0FBRyxhQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXpDLE1BQU0sTUFBTSxHQUFHLGFBQUcsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7SUFFMUMsT0FBTztRQUNMLFdBQVc7UUFDWCxDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QixjQUFjO0tBQ2YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLEtBQUssQ0FBQyxLQUFLO0lBQ2xCLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQy9DLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FBQyxHQUFHO0lBQzFCLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkMsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQsU0FBUyxRQUFRLENBQUMsR0FBRztJQUNuQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN4QixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMifQ==