"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class LazyTruffleContractProvisioner {
    constructor(web3) {
        this._web3 = web3;
    }
    provision(Contract, linker) {
        Contract.setProvider(this._web3.currentProvider);
        const originalLink = Contract.link;
        Contract.link = (...args) => {
            // This is a simple way to detect if it is being called with a contract as first argument.
            if (Array.isArray(args[0].abi)) {
                return linker.link(Contract, args[0]);
            }
            // TODO: This may break if called manually with (name, address), as solc changed
            // the format of its symbols.
            originalLink.apply(Contract, args);
        };
        this._hookCloneCalls(Contract, linker);
        return Contract;
    }
    _hookCloneCalls(Contract, linker) {
        const originalClone = Contract.clone;
        Contract.clone = (...args) => {
            const cloned = originalClone.apply(Contract, args);
            return this.provision(cloned, linker);
        };
    }
}
exports.LazyTruffleContractProvisioner = LazyTruffleContractProvisioner;
//# sourceMappingURL=provisioner.js.map