"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("util");
const subscriptions_1 = require("../subscriptions");
const abi_1 = require("./abi");
const tx_1 = require("./tx");
const decode_event_abi_1 = require("./decode-event-abi");
const formatters_1 = require("../formatters");
const utils_1 = require("../utils");
const tx_deploy_1 = require("./tx-deploy");
const errors_1 = require("../errors");
/**
 * Should be called to create new contract instance
 *
 * @method Contract
 * @constructor
 * @param {Array} jsonInterface
 * @param {String} address
 * @param {Object} options
 */
class Contract {
    constructor(eth, jsonInterface, address, defaultOptions = {}, wallet) {
        this.eth = eth;
        this.jsonInterface = jsonInterface;
        this.address = address;
        this.wallet = wallet;
        this.contractDeployFormatter = receipt => {
            this.setAddress(receipt.contractAddress);
            return receipt;
        };
        this.receiptFormatter = (receipt) => {
            if (!util_1.isArray(receipt.logs)) {
                return receipt;
            }
            // decode logs
            const decodedEvents = receipt.logs.map(log => decode_event_abi_1.decodeAnyEvent(this.jsonInterface, log));
            // make log names keys
            receipt.events = {};
            receipt.unnamedEvents = [];
            for (let ev of decodedEvents) {
                if (ev.event) {
                    const events = receipt.events[ev.event] || [];
                    receipt.events[ev.event] = [...events, ev];
                }
                else {
                    receipt.unnamedEvents = [...receipt.unnamedEvents, ev];
                }
            }
            delete receipt.logs;
            return receipt;
        };
        this.jsonInterface = this.getEnrichedAbiDefinition(jsonInterface);
        this.methods = this.getMethods(this.jsonInterface);
        this.events = this.getEvents(this.jsonInterface);
        const { gasPrice, from, gas } = defaultOptions;
        this.options = {
            gas,
            gasPrice,
            from: from ? utils_1.toChecksumAddress(formatters_1.inputAddressFormatter(from)) : undefined,
        };
        if (address) {
            this.setAddress(address);
        }
        this.extraFormatters = {
            receiptFormatter: this.receiptFormatter,
            contractDeployFormatter: this.contractDeployFormatter,
        };
    }
    /**
     * Deploys a contract and fire events based on its state: transactionHash, receipt
     * contract.deploy(data, 1, 2).send({ from: 0x123... });
     *
     * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
     */
    deploy(data, ...args) {
        const constructor = this.jsonInterface.find(method => method.type === 'constructor') || {
            type: 'constructor',
        };
        constructor.signature = 'constructor';
        return new tx_deploy_1.TxDeploy(this.eth, constructor, data, args, this.options, this.wallet, this.extraFormatters);
    }
    /**
     * Adds event listeners and creates a subscription, and remove it once its fired.
     *
     * @method once
     * @param {String} event
     * @param {Object} options
     * @param {Function} callback
     * @return {Object} the event subscription
     */
    once(event, options, callback) {
        // don't return as once shouldn't provide "on"
        this.on(event, options, (err, res, sub) => {
            sub.unsubscribe();
            callback(err, res, sub);
        });
    }
    /**
     * Adds event listeners and creates a subscription.
     */
    on(event, options = {}, callback) {
        const logOptions = this.getLogOptions(event, options);
        const { fromBlock } = logOptions, subLogOptions = tslib_1.__rest(logOptions, ["fromBlock"]);
        var subscription = new subscriptions_1.Subscription('eth', 'logs', [formatters_1.inputLogFormatter(subLogOptions)], this.eth.provider);
        subscription
            .on('rawdata', log => {
            const output = decode_event_abi_1.decodeAnyEvent(this.jsonInterface, log);
            if (output.removed) {
                subscription.emit('changed', output);
            }
            else {
                subscription.emit('data', output);
            }
            if (callback) {
                callback(undefined, output, subscription);
            }
        })
            .on('error', err => {
            if (callback) {
                callback(err, undefined, subscription);
            }
        });
        if (fromBlock !== undefined) {
            this.eth
                .getPastLogs(logOptions)
                .then(logs => {
                logs.forEach(log => subscription.emit('rawdata', log));
                subscription.subscribe();
            })
                .catch(err => {
                subscription.emit('error', err);
            });
        }
        else {
            process.nextTick(() => subscription.subscribe());
        }
        return subscription;
    }
    getPastEvents(event, options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const logOptions = this.getLogOptions(event, options);
            const result = yield this.eth.getPastLogs(logOptions);
            return result.map(log => decode_event_abi_1.decodeAnyEvent(this.jsonInterface, log));
        });
    }
    executorFactory(definition, nextOverload) {
        return (...args) => {
            if (!this.address) {
                throw new Error('No contract address.');
            }
            if ((!args && definition.inputs && definition.inputs.length > 0) ||
                (definition.inputs && args.length !== definition.inputs.length)) {
                if (nextOverload) {
                    return nextOverload(...args);
                }
                throw errors_1.InvalidNumberOfParams(args.length, definition.inputs.length, definition.name);
            }
            return new tx_1.Tx(this.eth, definition, this.address, args, this.options, this.wallet, this.extraFormatters);
        };
    }
    setAddress(address) {
        this.address = utils_1.toChecksumAddress(formatters_1.inputAddressFormatter(address));
    }
    getMethods(contractDefinition) {
        const methods = {};
        contractDefinition
            .filter(method => method.type === 'function')
            .forEach(method => {
            const name = method.name;
            const funcName = abi_1.abiMethodToString(method);
            method.signature = abi_1.abi.encodeFunctionSignature(funcName);
            const func = this.executorFactory(method);
            // add method only if not one already exists
            if (!methods[name]) {
                methods[name] = func;
            }
            else {
                const cascadeFunc = this.executorFactory(method, methods[name]);
                methods[name] = cascadeFunc;
            }
            // definitely add the method based on its signature
            methods[method.signature] = func;
            // add method by name
            methods[funcName] = func;
        });
        return methods;
    }
    getEvents(contractDefinition) {
        const events = {};
        contractDefinition
            .filter(method => method.type === 'event')
            .forEach(method => {
            const name = method.name;
            const funcName = abi_1.abiMethodToString(method);
            const event = this.on.bind(this, method.signature);
            // add method only if not already exists
            if (!events[name] || events[name].name === 'bound ')
                events[name] = event;
            // definitely add the method based on its signature
            events[method.signature] = event;
            // add event by name
            events[funcName] = event;
        });
        // add allEvents
        events.allEvents = this.on.bind(this, 'allevents');
        return events;
    }
    getEnrichedAbiDefinition(contractDefinition) {
        return contractDefinition.map(method => {
            // make constant and payable backwards compatible
            const constant = method.stateMutability === 'view' || method.stateMutability === 'pure' || method.constant;
            const payable = method.stateMutability === 'payable' || method.payable;
            method = Object.assign({}, method, { constant,
                payable });
            // function
            if (method.type === 'function') {
                method = Object.assign({}, method, { signature: abi_1.abi.encodeFunctionSignature(abi_1.abiMethodToString(method)) });
            }
            else if (method.type === 'event') {
                method = Object.assign({}, method, { signature: abi_1.abi.encodeEventSignature(abi_1.abiMethodToString(method)) });
            }
            return method;
        });
    }
    /**
     * Should be used to encode indexed params and options to one final object
     *
     * @method _encodeEventABI
     * @param {Object} event
     * @param {Object} options
     * @return {Object} everything combined together and encoded
     */
    getEventTopics(event, options) {
        let topics = [];
        // add event signature
        if (!event.anonymous && event.signature) {
            topics.push(event.signature);
        }
        // add event topics (indexed arguments)
        const indexedTopics = (event.inputs || [])
            .filter(input => input.indexed === true)
            .map(input => {
            const filter = options.filter || {};
            const value = filter[input.name];
            if (!value) {
                return null;
            }
            // TODO: https://github.com/ethereum/web3.js/issues/344
            // TODO: deal properly with components
            if (util_1.isArray(value)) {
                return value.map(v => abi_1.abi.encodeParameter(input.type, v));
            }
            else {
                return abi_1.abi.encodeParameter(input.type, value);
            }
        });
        return [...topics, ...indexedTopics];
    }
    /**
     * Gets the event signature and outputformatters
     */
    getLogOptions(eventName = 'allevents', options) {
        if (!utils_1.isAddress(this.address)) {
            throw new Error("This contract object doesn't have address set yet, please set an address first.");
        }
        if (eventName.toLowerCase() === 'allevents') {
            return Object.assign({}, options, { address: this.address });
        }
        const event = this.jsonInterface.find(json => json.type === 'event' && (json.name === eventName || json.signature === '0x' + eventName.replace('0x', '')));
        if (!event) {
            throw new Error('Event "' + eventName + '" doesn\'t exist in this contract.');
        }
        return Object.assign({}, options, { address: this.address, topics: this.getEventTopics(event, options) });
    }
}
exports.Contract = Contract;
//# sourceMappingURL=data:application/json;base64,