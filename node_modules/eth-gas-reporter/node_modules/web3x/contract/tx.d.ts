import { AbiDefinition } from '.';
import { TransactionReceipt } from '../formatters';
import { Eth, SendTxPromiEvent, BlockType } from '../eth';
import { Wallet } from '../wallet';
export declare type TxFactory = (...args: any[]) => Tx;
export interface CallOptions {
    from?: string;
    gasPrice?: string | number;
    gas?: number;
}
export interface SendOptions {
    from: string;
    gasPrice?: string | number;
    gas?: number;
    value?: number | string;
}
interface EstimateOptions {
    from?: string;
    gas?: string | number;
    gasPrice?: string | number;
    value?: number | string;
}
declare type DefaultOptions = {
    from?: string;
    gasPrice?: string | number;
    gas?: number;
};
export interface TxCall<Return = any> {
    call(options?: CallOptions, block?: BlockType): Promise<Return>;
    getCallRequestPayload(options?: CallOptions, block?: number): any;
    estimateGas(options?: EstimateOptions): Promise<number>;
    encodeABI(): string;
}
export interface TxSend<TxReceipt = TransactionReceipt> {
    send(options?: SendOptions): SendTxPromiEvent<TxReceipt>;
    getSendRequestPayload(options?: SendOptions): any;
    estimateGas(options?: EstimateOptions): Promise<number>;
    encodeABI(): string;
}
/**
 * returns the an object with call, send, estimate functions
 *
 * @method _createTxObject
 * @returns {Object} an object with functions to call the methods
 */
export declare class Tx implements TxCall, TxSend {
    private eth;
    private definition;
    private contractAddress;
    private args;
    private defaultOptions;
    private wallet?;
    private extraFormatters?;
    constructor(eth: Eth, definition: AbiDefinition, contractAddress: string, args?: any[], defaultOptions?: DefaultOptions, wallet?: Wallet | undefined, extraFormatters?: any);
    estimateGas(options?: EstimateOptions): Promise<number>;
    call(options?: CallOptions, block?: BlockType): Promise<any>;
    getCallRequestPayload(options: CallOptions, block?: number): {
        format: (result: any) => any;
        method: string;
        params: any[];
    };
    send(options: SendOptions): SendTxPromiEvent;
    getSendRequestPayload(options: SendOptions): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    private getAccount;
    private getTx;
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method encodeABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    encodeABI(): string;
    /**
     * Decode method return values
     *
     * @method _decodeMethodReturn
     * @param {Array} outputs
     * @param {String} returnValues
     * @return {Object} decoded output return values
     */
    private decodeMethodReturn;
}
export {};
