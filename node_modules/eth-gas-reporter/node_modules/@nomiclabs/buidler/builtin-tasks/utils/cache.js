"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const glob_1 = require("../../internal/util/glob");
const LAST_CONFIG_USED_FILENAME = "path-to-last-config-used.txt";
async function getModificationDate(file) {
    const stat = await fs_extra_1.default.stat(file);
    return new Date(stat.mtime);
}
async function getConfigModificationDate(configPath) {
    return getModificationDate(configPath);
}
async function getModificationDatesInDir(dir, filesExtension) {
    const pattern = path_1.default.join(dir, "**", "*" + filesExtension);
    const files = await glob_1.glob(pattern);
    const promises = files.map(getModificationDate);
    return Promise.all(promises);
}
async function getLastModificationDateInDir(dir, filesExtension) {
    const dates = await getModificationDatesInDir(dir, filesExtension);
    if (dates.length === 0) {
        return undefined;
    }
    return dates.reduce((d1, d2) => (d1.getTime() > d2.getTime() ? d1 : d2));
}
function getPathToCachedLastConfigPath(paths) {
    const pathToLastConfigUsed = path_1.default.join(paths.cache, LAST_CONFIG_USED_FILENAME);
    return pathToLastConfigUsed;
}
async function getLastUsedConfig(paths) {
    const pathToLastConfigUsed = getPathToCachedLastConfigPath(paths);
    if (!(await fs_extra_1.default.pathExists(pathToLastConfigUsed))) {
        return undefined;
    }
    return fs_extra_1.default.readFile(pathToLastConfigUsed, "utf-8");
}
async function saveLastConfigUsed(paths) {
    const pathToLastConfigUsed = getPathToCachedLastConfigPath(paths);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(pathToLastConfigUsed));
    return fs_extra_1.default.writeFile(pathToLastConfigUsed, paths.configFile, "utf-8");
}
async function areArtifactsCached(paths) {
    const lastConfig = await getLastUsedConfig(paths);
    if (lastConfig !== paths.configFile) {
        await saveLastConfigUsed(paths);
        return false;
    }
    const lastSourcesModification = await getLastModificationDateInDir(paths.sources, ".sol");
    const lastArtifactsModification = await getLastModificationDateInDir(paths.artifacts, ".json");
    const configModification = await getConfigModificationDate(paths.configFile);
    if (lastArtifactsModification === undefined ||
        lastSourcesModification === undefined) {
        return false;
    }
    // If the config was changed we invalidate the cache
    if (configModification.getTime() > lastArtifactsModification.getTime()) {
        return false;
    }
    return (lastArtifactsModification.getTime() > lastSourcesModification.getTime());
}
exports.areArtifactsCached = areArtifactsCached;
//# sourceMappingURL=cache.js.map