"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const net_request_payloads_1 = require("./net-request-payloads");
class Net {
    constructor(eth) {
        this.eth = eth;
        this.request = new net_request_payloads_1.NetRequestPayloads();
    }
    send({ method, params, format }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return format(yield this.eth.provider.send(method, params));
        });
    }
    getId() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getId();
            return payload.format(yield this.send(payload));
        });
    }
    isListening() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.isListening();
            return payload.format(yield this.send(payload));
        });
    }
    getPeerCount() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getPeerCount();
            return payload.format(yield this.send(payload));
        });
    }
    getNetworkType() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const block = yield this.eth.getBlock(0);
            const genesisHash = block.hash;
            const id = yield this.getId();
            if (genesisHash === '0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3' && id === 1) {
                return 'main';
            }
            else if (genesisHash === '0cd786a2425d16f152c658316c423e6ce1181e15c3295826d7c9904cba9ce303' && id === 2) {
                return 'morden';
            }
            else if (genesisHash === '0x41941023680923e0fe4d74a34bdac8141f2540e3ae90623718e47d66d1ca4a2d' && id === 3) {
                return 'ropsten';
            }
            else if (genesisHash === '0x6341fd3daf94b748c72ced5a5b26028f2474f5f00d824504e4fa37a75767e177' && id === 4) {
                return 'rinkeby';
            }
            else if (genesisHash === '0xa3c565fc15c7478862d50ccd6561e3c06b24cc509bf388941c25ea985ce32cb9' && id === 42) {
                return 'kovan';
            }
            else {
                return 'private';
            }
        });
    }
}
exports.Net = Net;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25ldC9uZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsaUVBQTREO0FBRzVELE1BQWEsR0FBRztJQUVkLFlBQW9CLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBRHBCLFlBQU8sR0FBRyxJQUFJLHlDQUFrQixFQUFFLENBQUM7SUFDWixDQUFDO0lBRWxCLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFtRDs7WUFDNUYsT0FBTyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztLQUFBO0lBRUssS0FBSzs7WUFDVCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUUsQ0FBQztRQUNuRCxDQUFDO0tBQUE7SUFFSyxXQUFXOztZQUNmLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDM0MsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FBQTtJQUVLLFlBQVk7O1lBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDNUMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBRSxDQUFDO1FBQ25ELENBQUM7S0FBQTtJQUVLLGNBQWM7O1lBQ2xCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekMsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztZQUMvQixNQUFNLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUU5QixJQUFJLFdBQVcsS0FBSyxvRUFBb0UsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUNwRyxPQUFPLE1BQU0sQ0FBQzthQUNmO2lCQUFNLElBQUksV0FBVyxLQUFLLGtFQUFrRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQ3pHLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO2lCQUFNLElBQUksV0FBVyxLQUFLLG9FQUFvRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzNHLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO2lCQUFNLElBQUksV0FBVyxLQUFLLG9FQUFvRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUU7Z0JBQzNHLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO2lCQUFNLElBQUksV0FBVyxLQUFLLG9FQUFvRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzVHLE9BQU8sT0FBTyxDQUFDO2FBQ2hCO2lCQUFNO2dCQUNMLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUExQ0Qsa0JBMENDIn0=