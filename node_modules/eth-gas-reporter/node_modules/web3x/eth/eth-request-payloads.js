"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const formatters_1 = require("../formatters");
const util_1 = require("util");
const identity = result => result;
class EthRequestPayloads {
    constructor(defaultFromAddress, defaultBlock = 'latest') {
        this.defaultFromAddress = defaultFromAddress;
        this.defaultBlock = defaultBlock;
    }
    getDefaultFromAddress() {
        return this.defaultFromAddress;
    }
    setDefaultFromAddress(address) {
        this.defaultFromAddress = address ? utils_1.toChecksumAddress(formatters_1.inputAddressFormatter(address)) : undefined;
    }
    getDefaultBlock() {
        return this.defaultBlock;
    }
    setDefaultBlock(block) {
        this.defaultBlock = block;
    }
    getId() {
        return {
            method: 'net_version',
            format: utils_1.hexToNumber,
        };
    }
    getNodeInfo() {
        return {
            method: 'web3_clientVersion',
            format: identity,
        };
    }
    getProtocolVersion() {
        return {
            method: 'eth_protocolVersion',
            format: identity,
        };
    }
    getCoinbase() {
        return {
            method: 'eth_coinbase',
            format: identity,
        };
    }
    isMining() {
        return {
            method: 'eth_mining',
            format: identity,
        };
    }
    getHashrate() {
        return {
            method: 'eth_hashrate',
            format: utils_1.hexToNumber,
        };
    }
    isSyncing() {
        return {
            method: 'eth_syncing',
            format: formatters_1.outputSyncingFormatter,
        };
    }
    getGasPrice() {
        return {
            method: 'eth_gasPrice',
            format: formatters_1.outputBigNumberFormatter,
        };
    }
    getAccounts() {
        return {
            method: 'eth_accounts',
            format: result => result.map(utils_1.toChecksumAddress),
        };
    }
    getBlockNumber() {
        return {
            method: 'eth_blockNumber',
            format: utils_1.hexToNumber,
        };
    }
    getBalance(address, block) {
        return {
            method: 'eth_getBalance',
            params: [formatters_1.inputAddressFormatter(address), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: formatters_1.outputBigNumberFormatter,
        };
    }
    getStorageAt(address, position, block) {
        return {
            method: 'eth_getStorageAt',
            params: [
                formatters_1.inputAddressFormatter(address),
                utils_1.numberToHex(position),
                formatters_1.inputBlockNumberFormatter(this.resolveBlock(block)),
            ],
            format: identity,
        };
    }
    getCode(address, block) {
        return {
            method: 'eth_getCode',
            params: [formatters_1.inputAddressFormatter(address), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: identity,
        };
    }
    getBlock(block, returnTransactionObjects = false) {
        return {
            method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getBlockByHash' : 'eth_getBlockByNumber',
            params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block)), returnTransactionObjects],
            format: formatters_1.outputBlockFormatter,
        };
    }
    getUncle(block, uncleIndex, returnTransactionObjects = false) {
        return {
            method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex',
            params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block)), utils_1.numberToHex(uncleIndex), returnTransactionObjects],
            format: formatters_1.outputBlockFormatter,
        };
    }
    getBlockTransactionCount(block) {
        return {
            method: util_1.isString(block) && utils_1.isHexStrict(block)
                ? 'eth_getBlockTransactionCountByHash'
                : 'eth_getBlockTransactionCountByNumber',
            params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: utils_1.hexToNumber,
        };
    }
    getBlockUncleCount(block) {
        return {
            method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber',
            params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: utils_1.hexToNumber,
        };
    }
    getTransaction(hash) {
        return {
            method: 'eth_getTransactionByHash',
            params: [hash],
            format: formatters_1.outputTransactionFormatter,
        };
    }
    getTransactionFromBlock(block, index) {
        return {
            method: util_1.isString(block) && utils_1.isHexStrict(block)
                ? 'eth_getTransactionByBlockHashAndIndex'
                : 'eth_getTransactionByBlockNumberAndIndex',
            params: [formatters_1.inputBlockNumberFormatter(block), utils_1.numberToHex(index)],
            format: formatters_1.outputTransactionFormatter,
        };
    }
    getTransactionReceipt(hash) {
        return {
            method: 'eth_getTransactionReceipt',
            params: [hash],
            format: formatters_1.outputTransactionReceiptFormatter,
        };
    }
    getTransactionCount(address, block) {
        return {
            method: 'eth_getTransactionCount',
            params: [formatters_1.inputAddressFormatter(address), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: utils_1.hexToNumber,
        };
    }
    signTransaction(tx) {
        tx.from = tx.from || this.defaultFromAddress;
        return {
            method: 'eth_signTransaction',
            params: [formatters_1.inputTransactionFormatter(tx)],
            format: identity,
        };
    }
    sendSignedTransaction(data) {
        return {
            method: 'eth_sendRawTransaction',
            params: [data],
            format: identity,
        };
    }
    sendTransaction(tx) {
        tx.from = tx.from || this.defaultFromAddress;
        return {
            method: 'eth_sendTransaction',
            params: [formatters_1.inputTransactionFormatter(tx)],
            format: identity,
        };
    }
    sign(address, dataToSign) {
        return {
            method: 'eth_sign',
            params: [formatters_1.inputAddressFormatter(address), formatters_1.inputSignFormatter(dataToSign)],
            format: identity,
        };
    }
    signTypedData(address, dataToSign) {
        return {
            method: 'eth_signTypedData',
            params: [dataToSign, formatters_1.inputAddressFormatter(address)],
            format: identity,
        };
    }
    call(callObject, block, outputFormatter = result => result) {
        return {
            method: 'eth_call',
            params: [formatters_1.inputCallFormatter(callObject), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],
            format: outputFormatter,
        };
    }
    estimateGas(tx) {
        tx.from = tx.from || this.defaultFromAddress;
        return {
            method: 'eth_estimateGas',
            params: [formatters_1.inputCallFormatter(tx)],
            format: utils_1.hexToNumber,
        };
    }
    submitWork(nonce, powHash, digest) {
        return {
            method: 'eth_submitWork',
            params: [nonce, powHash, digest],
            format: identity,
        };
    }
    getWork() {
        return {
            method: 'eth_getWork',
            format: identity,
        };
    }
    getPastLogs(options) {
        return {
            method: 'eth_getLogs',
            params: [formatters_1.inputLogFormatter(options)],
            format: result => result.map(formatters_1.outputLogFormatter),
        };
    }
    resolveBlock(block) {
        return block === undefined ? this.defaultBlock : block;
    }
}
exports.EthRequestPayloads = EthRequestPayloads;
//# sourceMappingURL=data:application/json;base64,