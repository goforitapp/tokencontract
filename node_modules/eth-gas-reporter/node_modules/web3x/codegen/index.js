#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const got_1 = tslib_1.__importDefault(require("got"));
const mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
const printer = typescript_1.default.createPrinter({
    newLine: typescript_1.default.NewLineKind.LineFeed,
});
function makeImports(name, web3xPath) {
    return [
        typescript_1.default.createImportDeclaration(undefined, undefined, typescript_1.default.createImportClause(typescript_1.default.createIdentifier('BN'), undefined), typescript_1.default.createLiteral('bn.js')),
        typescript_1.default.createImportDeclaration(undefined, undefined, typescript_1.default.createImportClause(undefined, typescript_1.default.createNamedImports([
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('EventLog')),
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('TransactionReceipt')),
        ])), typescript_1.default.createLiteral(`${web3xPath}/formatters`)),
        typescript_1.default.createImportDeclaration(undefined, undefined, typescript_1.default.createImportClause(undefined, typescript_1.default.createNamedImports([
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('Contract')),
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('ContractOptions')),
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('TxCall')),
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('TxSend')),
            typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('EventSubscriptionFactory')),
        ])), typescript_1.default.createLiteral(`${web3xPath}/contract`)),
        typescript_1.default.createImportDeclaration(undefined, undefined, typescript_1.default.createImportClause(undefined, typescript_1.default.createNamedImports([typescript_1.default.createImportSpecifier(undefined, typescript_1.default.createIdentifier('Eth'))])), typescript_1.default.createLiteral(`${web3xPath}/eth`)),
        typescript_1.default.createImportDeclaration(undefined, undefined, typescript_1.default.createImportClause(typescript_1.default.createIdentifier('abi'), undefined), typescript_1.default.createLiteral(`./${name}Abi`)),
    ];
}
function makeEventType(definition) {
    const props = typescript_1.default.createTypeLiteralNode(definition.inputs.map(input => typescript_1.default.createPropertySignature(undefined, input.name, undefined, getTsTypeFromSolidityType(input, true), undefined)));
    return typescript_1.default.createTypeAliasDeclaration(undefined, [typescript_1.default.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], `${definition.name}Event`, undefined, props);
}
function makeEventTypes(abi) {
    return abi.filter(def => def.type === 'event').map(makeEventType);
}
function makeEventLogInterface(definition) {
    const eventName = `${definition.name}Event`;
    return typescript_1.default.createInterfaceDeclaration(undefined, [typescript_1.default.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], `${eventName}Log`, undefined, [
        typescript_1.default.createHeritageClause(typescript_1.default.SyntaxKind.ExtendsKeyword, [
            typescript_1.default.createExpressionWithTypeArguments([
                typescript_1.default.createTypeReferenceNode(eventName, undefined),
                typescript_1.default.createLiteralTypeNode(typescript_1.default.createLiteral(definition.name)),
            ], typescript_1.default.createRegularExpressionLiteral('EventLog')),
        ]),
    ], []);
}
function makeEventLogInterfaces(abi) {
    return abi.filter(def => def.type === 'event').map(makeEventLogInterface);
}
function makeEventsInterface(name, abi) {
    const events = abi.filter(def => def.type === 'event').map(event => event.name);
    return typescript_1.default.createInterfaceDeclaration(undefined, undefined, `${name}Events`, undefined, undefined, events.map(eventName => typescript_1.default.createPropertySignature(undefined, eventName, undefined, typescript_1.default.createTypeReferenceNode(`EventSubscriptionFactory`, [
        typescript_1.default.createTypeReferenceNode(`${eventName}EventLog`, undefined),
    ]), undefined)));
}
function makeEventLogsInterface(name, abi) {
    const events = abi.filter(def => def.type === 'event').map(event => event.name);
    return typescript_1.default.createInterfaceDeclaration(undefined, undefined, `${name}EventLogs`, undefined, undefined, events.map(eventName => typescript_1.default.createPropertySignature(undefined, eventName, undefined, typescript_1.default.createTypeReferenceNode(`${eventName}EventLog`, undefined), undefined)));
}
function makeTxEventLogsInterface(name, abi) {
    const events = abi.filter(def => def.type === 'event').map(event => event.name);
    return typescript_1.default.createInterfaceDeclaration(undefined, undefined, `${name}TxEventLogs`, undefined, undefined, events.map(eventName => typescript_1.default.createPropertySignature(undefined, eventName, undefined, typescript_1.default.createArrayTypeNode(typescript_1.default.createTypeReferenceNode(`${eventName}EventLog`, undefined)), undefined)));
}
function makeTransactionReceiptInterface(name) {
    return typescript_1.default.createInterfaceDeclaration(undefined, [typescript_1.default.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], `${name}TransactionReceipt`, undefined, [
        typescript_1.default.createHeritageClause(typescript_1.default.SyntaxKind.ExtendsKeyword, [
            typescript_1.default.createExpressionWithTypeArguments([typescript_1.default.createTypeReferenceNode(`${name}TxEventLogs`, undefined)], typescript_1.default.createRegularExpressionLiteral('TransactionReceipt')),
        ]),
    ], []);
}
function getBaseType(type, returnValue) {
    if (type.match(/u?int\d*/) || type.match(/u?fixed[0-9x]*/)) {
        return !returnValue
            ? typescript_1.default.createUnionTypeNode([
                typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.NumberKeyword),
                typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword),
                typescript_1.default.createTypeReferenceNode(typescript_1.default.createIdentifier('BN'), undefined),
            ])
            : typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword);
    }
    if (type === 'bool') {
        return typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.BooleanKeyword);
    }
    return typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword);
}
function getTupleType(components, returnValue) {
    return typescript_1.default.createTypeLiteralNode(components.map(prop => typescript_1.default.createPropertySignature(undefined, prop.name, undefined, getTsTypeFromSolidityType(prop, returnValue), undefined)));
}
function getTsTypeFromSolidityType(input, returnValue) {
    const { type } = input;
    const isArray = /\[\]$/.test(type);
    const baseSolType = isArray ? type.substr(0, type.length - 2) : type;
    const isTuple = baseSolType === 'tuple';
    const baseTsType = isTuple ? getTupleType(input.components, returnValue) : getBaseType(input.type, returnValue);
    return isArray ? typescript_1.default.createArrayTypeNode(baseTsType) : baseTsType;
}
function makeParameter(input, index) {
    return typescript_1.default.createParameter(undefined, undefined, undefined, input.name || `a${index}`, undefined, getTsTypeFromSolidityType(input, false));
}
function getCallReturnType(outputs) {
    if (outputs.length === 1) {
        return typescript_1.default.createTypeReferenceNode('TxCall', [getTsTypeFromSolidityType(outputs[0], true)]);
    }
    else {
        const returnType = typescript_1.default.createTupleTypeNode(outputs.map(i => getTsTypeFromSolidityType(i, true)));
        return typescript_1.default.createTypeReferenceNode('TxCall', [returnType]);
    }
}
function getOutputType(name, definition) {
    if (!definition.stateMutability) {
        if (definition.outputs && definition.outputs.length) {
            return getCallReturnType(definition.outputs);
        }
        else {
            return typescript_1.default.createTypeReferenceNode('TxSend', [typescript_1.default.createTypeReferenceNode(`${name}TransactionReceipt`, undefined)]);
        }
    }
    if (definition.stateMutability === 'view' || definition.stateMutability === 'pure') {
        if (definition.outputs && definition.outputs.length) {
            return getCallReturnType(definition.outputs);
        }
        else {
            return undefined;
        }
    }
    else {
        return typescript_1.default.createTypeReferenceNode('TxSend', [typescript_1.default.createTypeReferenceNode(`${name}TransactionReceipt`, undefined)]);
    }
}
function makeMethod(name, definition) {
    return typescript_1.default.createMethodSignature(undefined, definition.inputs.map(makeParameter), getOutputType(name, definition), definition.name, undefined);
}
function makeMethodsInterface(name, abi) {
    const methods = abi.filter(def => def.type === 'function').map(def => makeMethod(name, def));
    return typescript_1.default.createInterfaceDeclaration(undefined, undefined, `${name}Methods`, undefined, undefined, methods);
}
function makeContract(name) {
    const ctor = typescript_1.default.createConstructor(undefined, undefined, [
        typescript_1.default.createParameter(undefined, undefined, undefined, 'eth', undefined, typescript_1.default.createTypeReferenceNode('Eth', undefined)),
        typescript_1.default.createParameter(undefined, undefined, undefined, 'address', typescript_1.default.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.default.createKeywordTypeNode(typescript_1.default.SyntaxKind.StringKeyword)),
        typescript_1.default.createParameter(undefined, undefined, undefined, 'options', typescript_1.default.createToken(typescript_1.default.SyntaxKind.QuestionToken), typescript_1.default.createTypeReferenceNode('ContractOptions', undefined)),
    ], typescript_1.default.createBlock([
        typescript_1.default.createStatement(typescript_1.default.createCall(typescript_1.default.createSuper(), undefined, [
            typescript_1.default.createIdentifier('eth'),
            typescript_1.default.createIdentifier('abi'),
            typescript_1.default.createIdentifier('address'),
            typescript_1.default.createIdentifier('options'),
        ])),
    ], true));
    return typescript_1.default.createClassDeclaration(undefined, [typescript_1.default.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], name, undefined, [
        typescript_1.default.createHeritageClause(typescript_1.default.SyntaxKind.ExtendsKeyword, [
            typescript_1.default.createExpressionWithTypeArguments([typescript_1.default.createTypeReferenceNode(`${name}Definition`, undefined)], typescript_1.default.createRegularExpressionLiteral('Contract')),
        ]),
    ], [ctor]);
}
function makeDefinitionInterface(name) {
    const props = [
        typescript_1.default.createPropertySignature(undefined, 'methods', undefined, typescript_1.default.createTypeReferenceNode(`${name}Methods`, undefined), undefined),
        typescript_1.default.createPropertySignature(undefined, 'events', undefined, typescript_1.default.createTypeReferenceNode(`${name}Events`, undefined), undefined),
        typescript_1.default.createPropertySignature(undefined, 'eventLogs', undefined, typescript_1.default.createTypeReferenceNode(`${name}EventLogs`, undefined), undefined),
    ];
    return typescript_1.default.createInterfaceDeclaration(undefined, [typescript_1.default.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], `${name}Definition`, undefined, undefined, props);
}
function makeAbiExport(name) {
    return typescript_1.default.createVariableStatement([typescript_1.default.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], [typescript_1.default.createVariableDeclaration(`${name}Abi`, undefined, typescript_1.default.createIdentifier('abi'))]);
}
function makeFile(name, abi, web3xPath) {
    const imports = makeImports(name, web3xPath);
    const eventTypes = makeEventTypes(abi);
    const eventLogTypes = makeEventLogInterfaces(abi);
    const eventsInterface = makeEventsInterface(name, abi);
    const eventLogsInterface = makeEventLogsInterface(name, abi);
    const eventTxLogsInterface = makeTxEventLogsInterface(name, abi);
    const txReceiptInterface = makeTransactionReceiptInterface(name);
    const methodsInterface = makeMethodsInterface(name, abi);
    const definitionInterface = makeDefinitionInterface(name);
    const contract = makeContract(name);
    const abiExport = makeAbiExport(name);
    return typescript_1.default.createNodeArray([
        ...imports,
        ...eventTypes,
        ...eventLogTypes,
        eventsInterface,
        eventLogsInterface,
        eventTxLogsInterface,
        txReceiptInterface,
        methodsInterface,
        definitionInterface,
        contract,
        abiExport,
    ]);
}
function getContractAbi(abiLocation) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if (Array.isArray(abiLocation)) {
            return abiLocation;
        }
        else if (abiLocation.match(/^http/)) {
            const response = yield got_1.default(abiLocation, { json: true });
            return response.body;
        }
        else {
            const json = JSON.parse(fs_1.default.readFileSync(abiLocation).toString());
            if (Array.isArray(json)) {
                return json;
            }
            else if (json.abi && Array.isArray(json.abi)) {
                return json.abi;
            }
            else {
                throw new Error(`Unable to extract ABI from json at ${abiLocation}`);
            }
        }
    });
}
function makeAndWriteAbi(outputPath, name, abi, web3xPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const abiOutputFile = `${outputPath}/${name}Abi.ts`;
        const output = `import { ContractAbi } from '${web3xPath}/contract';\nexport default ${JSON.stringify(abi, undefined, 2)} as ContractAbi;`;
        fs_1.default.writeFileSync(abiOutputFile, output);
        /*
        const jsonFile = ts.createSourceFile(
          'someFile.ts',
          JSON.stringify(abi),
          ts.ScriptTarget.Latest,
          true,
          ts.ScriptKind.TS,
        );
      
        let thing: any = jsonFile.statements[0];
      
        const varStmt = ts.createVariableStatement(
          [ts.createModifier(ts.SyntaxKind.ExportKeyword)],
          [
            ts.createVariableDeclaration(
              `Abi`,
              undefined,
              ts.createAsExpression(thing.expression, ts.createTypeReferenceNode('ContractAbi', undefined)),
            ),
          ],
        );
      
        const resultFile = ts.createSourceFile('', '', ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);
        resultFile.statements = ts.createNodeArray([varStmt]);
        fs.writeFileSync(abiOutputFile, printer.printFile(resultFile));
        */
    });
}
function makeAndWriteFiles(outputPath, name, abiLocation, web3xPath) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const interfaceOutputFile = `${outputPath}/${name}.ts`;
        const abi = yield getContractAbi(abiLocation);
        const resultFile = typescript_1.default.createSourceFile('', '', typescript_1.default.ScriptTarget.Latest, false, typescript_1.default.ScriptKind.TS);
        resultFile.statements = makeFile(name, abi, web3xPath);
        fs_1.default.writeFileSync(interfaceOutputFile, printer.printFile(resultFile));
        makeAndWriteAbi(outputPath, name, abi, web3xPath);
    });
}
exports.makeAndWriteFiles = makeAndWriteFiles;
function getWeb3xPath() {
    const pkg = JSON.parse(fs_1.default.readFileSync(__dirname + '/../package.json').toString());
    return pkg.name;
}
exports.getWeb3xPath = getWeb3xPath;
function main() {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const configFile = process.argv[2] || 'contracts.json';
        const config = JSON.parse(fs_1.default.readFileSync(configFile).toString());
        const { outputPath = './contracts', web3xPath = getWeb3xPath() } = config;
        mkdirp_1.default.sync(outputPath);
        yield Promise.all(Object.entries(config.contracts).map(entry => makeAndWriteFiles(outputPath, entry[0], entry[1], web3xPath)));
    });
}
if (require.main === module) {
    main().catch(console.error);
}
//# sourceMappingURL=data:application/json;base64,