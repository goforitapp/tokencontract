"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bip39_1 = tslib_1.__importDefault(require("bip39"));
const hdkey_1 = tslib_1.__importDefault(require("hdkey"));
const account_1 = require("../eth-lib/account");
const utils_1 = require("../utils");
const sign_1 = require("../utils/sign");
const sign_transaction_1 = require("./sign-transaction");
const promievent_1 = require("../promievent");
class Account {
    constructor(address, privateKey, publicKey) {
        this.address = address;
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }
    static create(entropy = utils_1.randomHex(32)) {
        const { privateKey, address, publicKey } = account_1.create(entropy);
        return new Account(address, privateKey, publicKey);
    }
    static fromPrivate(privateKey) {
        const { address, publicKey } = account_1.fromPrivate(privateKey);
        return new Account(address, privateKey, publicKey);
    }
    static createFromMnemonicAndPath(mnemonic, derivationPath) {
        const seed = bip39_1.default.mnemonicToSeed(mnemonic);
        return Account.createFromSeedAndPath(seed, derivationPath);
    }
    static createFromSeedAndPath(seed, derivationPath) {
        const root = hdkey_1.default.fromMasterSeed(seed);
        const addrNode = root.derive(derivationPath);
        const privateKey = addrNode.privateKey;
        return Account.fromPrivate(privateKey);
    }
    static fromKeystore(v3Keystore, password, nonStrict = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return Account.fromPrivate(yield utils_1.decrypt(v3Keystore, password, nonStrict));
        });
    }
    sendTransaction(tx, eth, extraformatters) {
        const defer = promievent_1.promiEvent();
        this.signTransaction(tx, eth)
            .then(signedTx => {
            eth.sendSignedTransaction(signedTx.rawTransaction, extraformatters, defer);
        })
            .catch(err => {
            utils_1.fireError(err, defer.eventEmitter, defer.reject);
        });
        return defer.eventEmitter;
    }
    signTransaction(tx, eth) {
        return sign_transaction_1.signTransaction(tx, this.privateKey, eth);
    }
    sign(data) {
        return sign_1.sign(data, this.privateKey);
    }
    encrypt(password, options) {
        return utils_1.encrypt(this.privateKey, this.address, password, options);
    }
}
exports.Account = Account;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY2NvdW50L2FjY291bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsMERBQTBCO0FBQzFCLDBEQUEwQjtBQUMxQixnREFBeUQ7QUFDekQsb0NBQTRFO0FBQzVFLHdDQUFxQztBQUNyQyx5REFBcUQ7QUFFckQsOENBQTJDO0FBYTNDLE1BQWEsT0FBTztJQUNsQixZQUFtQixPQUFlLEVBQVMsVUFBa0IsRUFBUyxTQUFTO1FBQTVELFlBQU8sR0FBUCxPQUFPLENBQVE7UUFBUyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVMsY0FBUyxHQUFULFNBQVMsQ0FBQTtJQUFHLENBQUM7SUFFbkYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFrQixpQkFBUyxDQUFDLEVBQUUsQ0FBQztRQUMzQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxnQkFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNELE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFrQjtRQUNuQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLHFCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxNQUFNLENBQUMseUJBQXlCLENBQUMsUUFBZ0IsRUFBRSxjQUFzQjtRQUN2RSxNQUFNLElBQUksR0FBRyxlQUFLLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sT0FBTyxDQUFDLHFCQUFxQixDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQVksRUFBRSxjQUFzQjtRQUMvRCxNQUFNLElBQUksR0FBRyxlQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0MsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQztRQUN2QyxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBTyxZQUFZLENBQUMsVUFBNkIsRUFBRSxRQUFnQixFQUFFLFNBQVMsR0FBRyxLQUFLOztZQUMxRixPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxlQUFPLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzdFLENBQUM7S0FBQTtJQUVELGVBQWUsQ0FBQyxFQUFhLEVBQUUsR0FBUSxFQUFFLGVBQXFCO1FBQzVELE1BQU0sS0FBSyxHQUFHLHVCQUFVLEVBQXNCLENBQUM7UUFDL0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDO2FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNmLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RSxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDWCxpQkFBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztRQUNMLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQztJQUM1QixDQUFDO0lBRUQsZUFBZSxDQUFDLEVBQWEsRUFBRSxHQUFRO1FBQ3JDLE9BQU8sa0NBQWUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxDQUFDLElBQVk7UUFDZixPQUFPLFdBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxPQUFPLENBQUMsUUFBZ0IsRUFBRSxPQUFhO1FBQ3JDLE9BQU8sZUFBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkUsQ0FBQztDQUNGO0FBcERELDBCQW9EQyJ9