"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
function isHDAccountsConfig(accounts) {
    return accounts !== undefined && Object.keys(accounts).includes("mnemonic");
}
exports.isHDAccountsConfig = isHDAccountsConfig;
function createProvider(selectedNetwork, networksConfig) {
    if (networksConfig === undefined ||
        networksConfig[selectedNetwork] === undefined) {
        throw new errors_1.BuidlerError(errors_1.ERRORS.NETWORK.CONFIG_NOT_FOUND, selectedNetwork);
    }
    if (selectedNetwork === "auto") {
        throw new errors_1.BuidlerError(errors_1.ERRORS.GENERAL.UNSUPPORTED_OPERATION, "auto network");
    }
    const netConfig = networksConfig[selectedNetwork];
    // These dependencies are lazy-loaded because they are really big.
    // We use require() instead of import() here, because we need it to be sync.
    const { HttpProvider } = require("web3x/providers");
    const url = netConfig.url !== undefined ? netConfig.url : "http://localhost:8545";
    const provider = new HttpProvider(url);
    return wrapEthereumProvider(provider, netConfig);
}
exports.createProvider = createProvider;
function wrapEthereumProvider(provider, netConfig) {
    // These dependencies are lazy-loaded because they are really big.
    // We use require() instead of import() here, because we need it to be sync.
    const { createHDWalletProvider, createLocalAccountsProvider, createSenderProvider } = require("./accounts");
    const { createAutomaticGasPriceProvider, createAutomaticGasProvider, createFixedGasPriceProvider, createFixedGasProvider } = require("./gas-providers");
    const { createNetworkProvider } = require("./network");
    const accounts = netConfig.accounts;
    if (Array.isArray(accounts)) {
        provider = createLocalAccountsProvider(provider, accounts);
    }
    else if (isHDAccountsConfig(accounts)) {
        provider = createHDWalletProvider(provider, accounts.mnemonic, accounts.path, accounts.initialIndex, accounts.count);
    }
    // TODO: Add some extension mechanism for account plugins here
    provider = createSenderProvider(provider, netConfig.from);
    if (netConfig.gas === undefined || netConfig.gas === "auto") {
        provider = createAutomaticGasProvider(provider, netConfig.gasMultiplier);
    }
    else {
        provider = createFixedGasProvider(provider, netConfig.gas);
    }
    if (netConfig.gasPrice === undefined || netConfig.gasPrice === "auto") {
        provider = createAutomaticGasPriceProvider(provider);
    }
    else {
        provider = createFixedGasPriceProvider(provider, netConfig.gasPrice);
    }
    return createNetworkProvider(provider, netConfig.chainId);
}
exports.wrapEthereumProvider = wrapEthereumProvider;
//# sourceMappingURL=construction.js.map