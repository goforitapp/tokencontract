"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const subscriptions_1 = require("../subscriptions");
const utils_1 = require("../utils");
const formatters_1 = require("../formatters");
const util_1 = require("util");
const promievent_1 = require("../promievent");
const confirm_transaction_1 = require("./confirm-transaction");
const eth_request_payloads_1 = require("./eth-request-payloads");
class Eth {
    constructor(provider) {
        this.provider = provider;
        this.request = new eth_request_payloads_1.EthRequestPayloads(undefined, 'latest');
    }
    setWallet(wallet) {
        this.wallet = wallet;
    }
    getDefaultFromAddress() {
        return this.request.getDefaultFromAddress();
    }
    setDefaultFromAddress(address) {
        this.request.setDefaultFromAddress(address);
    }
    send({ method, params, format }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return format(yield this.provider.send(method, params));
        });
    }
    getId() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getId());
        });
    }
    getNodeInfo() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getNodeInfo());
        });
    }
    getProtocolVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getProtocolVersion());
        });
    }
    getCoinbase() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getCoinbase());
        });
    }
    isMining() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.isMining());
        });
    }
    getHashrate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getHashrate());
        });
    }
    isSyncing() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.isSyncing());
        });
    }
    getGasPrice() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getGasPrice());
        });
    }
    getAccounts() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getAccounts());
        });
    }
    getBlockNumber() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getBlockNumber());
        });
    }
    getBalance(address, block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getBalance(address, block));
        });
    }
    getStorageAt(address, position, block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getStorageAt(address, position, block));
        });
    }
    getCode(address, block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getCode(address, block));
        });
    }
    getBlock(block, returnTransactionObjects = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getBlock(block, returnTransactionObjects));
        });
    }
    getUncle(block, uncleIndex, returnTransactionObjects = false) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getUncle(block, uncleIndex, returnTransactionObjects));
        });
    }
    getBlockTransactionCount(block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getBlockTransactionCount(block));
        });
    }
    getBlockUncleCount(block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getBlockUncleCount(block));
        });
    }
    getTransaction(hash) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getTransaction(hash));
        });
    }
    getTransactionFromBlock(block, index) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getTransactionFromBlock(block, index));
        });
    }
    getTransactionReceipt(hash) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getTransactionReceipt(hash));
        });
    }
    getTransactionCount(address, block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getTransactionCount(address, block));
        });
    }
    signTransaction(tx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.signTransaction(tx));
        });
    }
    sendSignedTransaction(data, extraFormatters, defer) {
        defer = defer || promievent_1.promiEvent();
        const payload = this.request.sendSignedTransaction(data);
        this.sendTransactionAndWaitForConfirmation(defer, payload, extraFormatters);
        return defer.eventEmitter;
    }
    sendTransaction(tx, extraFormatters) {
        // TODO: Can we remove extraFormatters, which is basically exposing contract internals here, and instead
        // wrap the returned PromiEvent in another PromiEvent that does the translations upstream?
        const defer = promievent_1.promiEvent();
        this.sendTransactionAsync(defer, tx, extraFormatters).catch(err => {
            utils_1.fireError(err, defer.eventEmitter, defer.reject);
        });
        return defer.eventEmitter;
    }
    getAccount(address) {
        address = address || this.request.getDefaultFromAddress();
        if (this.wallet && address) {
            return this.wallet.get(address);
        }
    }
    sendTransactionAsync(defer, tx, extraFormatters) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const account = this.getAccount(tx.from);
            if (!tx.gasPrice) {
                tx.gasPrice = yield this.getGasPrice();
            }
            let payload;
            if (!account) {
                payload = this.request.sendTransaction(tx);
            }
            else {
                const { from } = tx, fromlessTx = tslib_1.__rest(tx, ["from"]);
                const signedTx = yield account.signTransaction(fromlessTx, this);
                payload = this.request.sendSignedTransaction(signedTx.rawTransaction);
            }
            this.sendTransactionAndWaitForConfirmation(defer, payload, extraFormatters);
        });
    }
    sendTransactionAndWaitForConfirmation(defer, payload, extraFormatters) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const result = yield this.send(payload);
                defer.eventEmitter.emit('transactionHash', result);
                confirm_transaction_1.confirmTransaction(defer, result, payload, this, extraFormatters);
            }
            catch (err) {
                utils_1.fireError(err, defer.eventEmitter, defer.reject);
            }
        });
    }
    sign(address, dataToSign) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const account = this.getAccount(address);
            if (!account) {
                return yield this.send(this.request.sign(address, dataToSign));
            }
            else {
                const sig = account.sign(dataToSign);
                return sig.signature;
            }
        });
    }
    signTypedData(address, dataToSign) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.signTypedData(address, dataToSign));
        });
    }
    call(tx, block, outputFormatter = result => result) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.call(tx, block, outputFormatter));
        });
    }
    estimateGas(tx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.estimateGas(tx));
        });
    }
    submitWork(nonce, powHash, digest) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.submitWork(nonce, powHash, digest));
        });
    }
    getWork() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getWork());
        });
    }
    getPastLogs(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.send(this.request.getPastLogs(options));
        });
    }
    subscribeLogs(options = {}) {
        const { fromBlock } = options, subLogOptions = tslib_1.__rest(options, ["fromBlock"]);
        const subscription = new subscriptions_1.Subscription('eth', 'logs', [formatters_1.inputLogFormatter(subLogOptions)], this.provider);
        subscription.on('rawdata', result => {
            const output = formatters_1.outputLogFormatter(result);
            if (output.removed) {
                subscription.emit('changed', output);
            }
            else {
                subscription.emit('data', output);
            }
        });
        if (fromBlock !== undefined) {
            this.getPastLogs(options)
                .then(logs => {
                logs.forEach(log => subscription.emit('rawdata', log));
                subscription.subscribe();
            })
                .catch(err => {
                subscription.emit('error', err);
            });
        }
        else {
            process.nextTick(() => subscription.subscribe());
        }
        return subscription;
    }
    subscribeSyncing() {
        const subscription = new subscriptions_1.Subscription('eth', 'syncing', [], this.provider);
        subscription.on('rawdata', result => {
            const output = formatters_1.outputSyncingFormatter(result);
            if (util_1.isBoolean(output)) {
                subscription.emit('changed', output);
                return;
            }
            subscription.emit('data', output);
        });
        process.nextTick(() => subscription.subscribe());
        return subscription;
    }
    subscribeNewBlockHeaders() {
        const subscription = new subscriptions_1.Subscription('eth', 'newHeads', [], this.provider);
        subscription.on('rawdata', result => {
            const output = formatters_1.outputBlockFormatter(result);
            subscription.emit('data', output);
        });
        process.nextTick(() => subscription.subscribe());
        return subscription;
    }
    subscribePendingTransactions() {
        const subscription = new subscriptions_1.Subscription('eth', 'newPendingTransactions', [], this.provider);
        subscription.on('rawdata', result => subscription.emit('data', result));
        process.nextTick(() => subscription.subscribe());
        return subscription;
    }
    subscribe(type, ...args) {
        switch (type) {
            case 'logs':
                return this.subscribeLogs(...args);
            case 'syncing':
                return this.subscribeSyncing();
            case 'newBlockHeaders':
                return this.subscribeNewBlockHeaders();
            case 'pendingTransactions':
                return this.subscribePendingTransactions();
            default:
                throw new Error(`Unknown subscription type: ${type}`);
        }
    }
}
exports.Eth = Eth;
//# sourceMappingURL=data:application/json;base64,