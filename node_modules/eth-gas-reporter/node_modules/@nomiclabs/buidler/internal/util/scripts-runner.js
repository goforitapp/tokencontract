"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
async function runScript(scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    const { fork } = await Promise.resolve().then(() => __importStar(require("child_process")));
    return new Promise((resolve, reject) => {
        const nodeArgs = [
            ...process.execArgv,
            ...getTsNodeArgsIfNeeded(),
            ...extraNodeArgs
        ];
        const childProcess = fork(scriptPath, scriptArgs, {
            stdio: "inherit",
            execArgv: nodeArgs,
            env: Object.assign({}, process.env, extraEnvVars)
        });
        childProcess.once("close", resolve);
        childProcess.once("error", reject);
    });
}
exports.runScript = runScript;
async function runScriptWithBuidler(scriptPath, scriptArgs = [], extraNodeArgs = [], extraEnvVars = {}) {
    return runScript(scriptPath, scriptArgs, [...extraNodeArgs, "--require", __dirname + "/../../register"], extraEnvVars);
}
exports.runScriptWithBuidler = runScriptWithBuidler;
function getTsNodeArgsIfNeeded() {
    if (!__filename.endsWith(".ts")) {
        return [];
    }
    const extraNodeArgs = [];
    if (!process.execArgv.includes("ts-node/register")) {
        extraNodeArgs.push("--require");
        extraNodeArgs.push("ts-node/register");
    }
    return extraNodeArgs;
}
//# sourceMappingURL=scripts-runner.js.map