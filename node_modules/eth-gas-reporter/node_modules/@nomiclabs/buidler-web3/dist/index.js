"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("@nomiclabs/buidler/config");
const plugins_1 = require("@nomiclabs/buidler/plugins");
const web3_provider_adapter_1 = require("./web3-provider-adapter");
plugins_1.ensurePluginLoadedWithUsePlugin();
function default_1() {
    config_1.extendEnvironment(env => {
        try {
            // We require this file bebause it is required when loading web3,
            // and it messes with global.web3.
            //
            // As we use a lazy object in global.web3, that triggers a full load
            // of web3 if someone touches it, and web3 touches it when loading,
            // a recrusive load will be started, and node will resolve
            // require("web3") to an empty object.
            //
            // If we load it before assigning the global.web3 object, then it
            // will be cached by node and never mess with our lazy object.
            //
            // tslint:disable-next-line no-implicit-dependencies
            require("web3-core-requestmanager/src/givenProvider.js");
        }
        catch (e) {
            // This file was removed in beta 38, which doesn't mess
            // with global.web3 during module loading anymore.
            // We have this empty catch to prevent this plugin from breaking
            // if web3 is upadted and this isn't revisited.
        }
        env.Web3 = plugins_1.lazyFunction(() => require("web3"));
        env.web3 = plugins_1.lazyObject(() => new env.Web3(new web3_provider_adapter_1.Web3HTTPProviderAdapter(env.ethereum)));
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map