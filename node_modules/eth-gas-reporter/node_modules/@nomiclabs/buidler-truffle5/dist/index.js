"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const task_names_1 = require("@nomiclabs/buidler/builtin-tasks/task-names");
const config_1 = require("@nomiclabs/buidler/config");
const glob_1 = require("@nomiclabs/buidler/internal/util/glob");
const plugins_1 = require("@nomiclabs/buidler/plugins");
const path_1 = require("path");
const artifacts_1 = require("./artifacts");
const provisioner_1 = require("./provisioner");
plugins_1.ensurePluginLoadedWithUsePlugin();
function default_1() {
    config_1.usePlugin("@nomiclabs/buidler-web3");
    config_1.extendEnvironment(env => {
        env.artifacts = plugins_1.lazyObject(() => {
            const provisioner = new provisioner_1.LazyTruffleContractProvisioner(env.web3);
            const artifacts = new artifacts_1.TruffleEnvironmentArtifacts(env.config.paths.artifacts, provisioner);
            const execute = require("truffle-contract/lib/execute");
            let noDefaultAccounts = false;
            let defaultAccount = env.config.networks[env.buidlerArguments.network].from;
            async function addFromIfNeededAndAvailable(params) {
                if (noDefaultAccounts) {
                    return;
                }
                if (params.from === undefined) {
                    if (defaultAccount === undefined) {
                        const accounts = await env.web3.eth.getAccounts();
                        if (accounts.length === 0) {
                            noDefaultAccounts = true;
                            return;
                        }
                        defaultAccount = accounts[0];
                    }
                    params.from = defaultAccount;
                }
            }
            const web3Path = require.resolve("web3");
            const formattersPath = require.resolve("web3-core-helpers/src/formatters", {
                paths: [web3Path]
            });
            const formatters = require(formattersPath);
            const originalFormatter = formatters.inputTransactionFormatter;
            formatters.inputTransactionFormatter = function (options) {
                if (options.from === undefined) {
                    throw new plugins_1.BuidlerPluginError("There's no account available in the selected network.");
                }
                return originalFormatter(options);
            };
            const originalGetGasEstimate = execute.getGasEstimate;
            execute.getGasEstimate = async function (params, ...others) {
                await addFromIfNeededAndAvailable(params);
                return originalGetGasEstimate.call(this, params, ...others);
            };
            const originalPrepareCall = execute.prepareCall;
            execute.prepareCall = async function (...args) {
                const ret = await originalPrepareCall.apply(this, args);
                await addFromIfNeededAndAvailable(ret.params);
                return ret;
            };
            return artifacts;
        });
    });
    config_1.internalTask(task_names_1.TASK_TEST_SETUP_TEST_ENVIRONMENT, async (_, { web3 }) => {
        const accounts = await web3.eth.getAccounts();
        const { assert } = await Promise.resolve().then(() => __importStar(require("chai")));
        const globalAsAny = global;
        globalAsAny.assert = assert;
        globalAsAny.contract = (description, definition) => describe(description, () => {
            definition(accounts);
        });
    });
    config_1.internalTask(task_names_1.TASK_COMPILE_GET_SOURCE_PATHS, async (_, { config }, runSuper) => {
        const sources = await runSuper();
        const testSources = await glob_1.glob(path_1.join(config.paths.tests, "**", "*.sol"));
        return [...sources, ...testSources];
    });
}
exports.default = default_1;
//# sourceMappingURL=index.js.map