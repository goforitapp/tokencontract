/// <reference types="node" />
import { EventEmitter } from 'events';
/**
 * This function generates a defer promise and adds eventEmitter functionality to it
 *
 * @method eventifiedPromise
 */
export declare class PromiEvent<T> implements Promise<T>, EventEmitter {
    [Symbol.toStringTag]: 'Promise';
    resolve: (result: T) => void;
    reject: (reason?: any) => void;
    emitter: EventEmitter;
    promise: Promise<T>;
    constructor(promise: Promise<T>, emitter: EventEmitter);
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined): PromiEvent<TResult1 | TResult2>;
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): PromiEvent<T | TResult>;
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
    addListener(event: string | symbol, listener: (...args: any[]) => void): this;
    on(event: string | symbol, listener: (...args: any[]) => void): this;
    once(event: string | symbol, listener: (...args: any[]) => void): this;
    prependListener(event: string | symbol, listener: (...args: any[]) => void): this;
    prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;
    removeListener(event: string | symbol, listener: (...args: any[]) => void): this;
    off(event: string | symbol, listener: (...args: any[]) => void): this;
    removeAllListeners(event?: string | symbol | undefined): this;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    listeners(event: string | symbol): Function[];
    rawListeners(event: string | symbol): Function[];
    emit(event: string | symbol, ...args: any[]): boolean;
    eventNames(): (string | symbol)[];
    listenerCount(type: string | symbol): number;
}
export interface PromiEventResult<T> {
    resolve: (result: T) => void;
    reject: (reason?: any) => void;
    eventEmitter: PromiEvent<T>;
}
export declare function promiEvent<T>(justPromise?: boolean): PromiEventResult<T>;
export declare function resolvedPromiEvent<T>(value: T): PromiEvent<T>;
