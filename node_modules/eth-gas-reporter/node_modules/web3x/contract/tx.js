"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("util");
const promievent_1 = require("../promievent");
const utils_1 = require("../utils");
const abi_1 = require("./abi");
const utils_2 = require("../utils");
const formatters_1 = require("../formatters");
/**
 * returns the an object with call, send, estimate functions
 *
 * @method _createTxObject
 * @returns {Object} an object with functions to call the methods
 */
class Tx {
    constructor(eth, definition, contractAddress, args = [], defaultOptions = {}, wallet, extraFormatters) {
        this.eth = eth;
        this.definition = definition;
        this.contractAddress = contractAddress;
        this.args = args;
        this.defaultOptions = defaultOptions;
        this.wallet = wallet;
        this.extraFormatters = extraFormatters;
        if (this.definition.type !== 'function') {
            throw new Error('Tx should only be used with functions.');
        }
        if (this.defaultOptions.from) {
            this.defaultOptions.from = utils_2.toChecksumAddress(formatters_1.inputAddressFormatter(this.defaultOptions.from));
        }
    }
    estimateGas(options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.eth.estimateGas(this.getTx(options));
        });
    }
    call(options = {}, block) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const result = yield this.eth.call(this.getTx(options), block);
            return this.decodeMethodReturn(this.definition.outputs, result);
        });
    }
    getCallRequestPayload(options, block) {
        const result = this.eth.request.call(this.getTx(options), block);
        return Object.assign({}, result, { format: result => this.decodeMethodReturn(this.definition.outputs, result) });
    }
    send(options) {
        const tx = this.getTx(options);
        // return error, if no "from" is specified
        if (!utils_1.isAddress(tx.from)) {
            const defer = promievent_1.promiEvent();
            return utils_1.fireError(new Error('No "from" address specified in neither the given options, nor the default options.'), defer.eventEmitter, defer.reject);
        }
        if (util_1.isBoolean(this.definition.payable) && !this.definition.payable && tx.value && tx.value > 0) {
            const defer = promievent_1.promiEvent();
            return utils_1.fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject);
        }
        const account = this.getAccount(tx.from);
        if (account) {
            return account.sendTransaction(tx, this.extraFormatters);
        }
        else {
            return this.eth.sendTransaction(tx, this.extraFormatters);
        }
    }
    getSendRequestPayload(options) {
        return this.eth.request.sendTransaction(this.getTx(options));
    }
    getAccount(address) {
        address = address || this.defaultOptions.from;
        if (this.wallet && address) {
            return this.wallet.get(address);
        }
    }
    getTx(options = {}) {
        return {
            to: this.contractAddress,
            from: options.from ? utils_2.toChecksumAddress(formatters_1.inputAddressFormatter(options.from)) : this.defaultOptions.from,
            gasPrice: options.gasPrice || this.defaultOptions.gasPrice,
            gas: options.gas || this.defaultOptions.gas,
            value: options.value,
            data: this.encodeABI(),
        };
    }
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method encodeABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    encodeABI() {
        let methodSignature = this.definition.signature;
        let paramsABI = abi_1.abi.encodeParameters(this.definition.inputs || [], this.args).replace('0x', '');
        return methodSignature + paramsABI;
    }
    /**
     * Decode method return values
     *
     * @method _decodeMethodReturn
     * @param {Array} outputs
     * @param {String} returnValues
     * @return {Object} decoded output return values
     */
    decodeMethodReturn(outputs, returnValues) {
        if (!returnValues) {
            return null;
        }
        returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
        var result = abi_1.abi.decodeParameters(outputs, returnValues);
        if (result.__length__ === 1) {
            return result[0];
        }
        else {
            delete result.__length__;
            return result;
        }
    }
}
exports.Tx = Tx;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvdHgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsK0JBQWlDO0FBRWpDLDhDQUEyQztBQUMzQyxvQ0FBZ0Q7QUFDaEQsK0JBQTRCO0FBQzVCLG9DQUE2QztBQUM3Qyw4Q0FBMEU7QUE4QzFFOzs7OztHQUtHO0FBQ0gsTUFBYSxFQUFFO0lBQ2IsWUFDVSxHQUFRLEVBQ1IsVUFBeUIsRUFDekIsZUFBdUIsRUFDdkIsT0FBYyxFQUFFLEVBQ2hCLGlCQUFpQyxFQUFFLEVBQ25DLE1BQWUsRUFDZixlQUFxQjtRQU5yQixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQ1IsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUN6QixvQkFBZSxHQUFmLGVBQWUsQ0FBUTtRQUN2QixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLG1CQUFjLEdBQWQsY0FBYyxDQUFxQjtRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQ2Ysb0JBQWUsR0FBZixlQUFlLENBQU07UUFFN0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRTtZQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksR0FBRyx5QkFBaUIsQ0FBQyxrQ0FBcUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDL0Y7SUFDSCxDQUFDO0lBRVksV0FBVyxDQUFDLFVBQTJCLEVBQUU7O1lBQ3BELE9BQU8sTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQztL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