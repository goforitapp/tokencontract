/// <reference types="node" />
import { Account } from '../account';
import { KeyStore } from '../utils/encryption';
export declare class Wallet {
    static defaultKeyName: string;
    length: number;
    accounts: Account[];
    constructor();
    static fromKeystores(encryptedWallet: KeyStore[], password: string): Promise<Wallet>;
    static fromLocalStorage(password: string, keyName?: string): Promise<Wallet>;
    private findSafeIndex;
    private currentIndexes;
    create(numberOfAccounts: number, entropy?: Buffer): Account[];
    get(addressOrIndex: string | number): Account | undefined;
    indexOf(addressOrIndex: string | number): number;
    add(privateKey: Buffer): Account;
    add(account: Account): Account;
    remove(addressOrIndex: string | number): boolean;
    clear(): void;
    encrypt(password: string, options?: any): Promise<KeyStore[]>;
    decrypt(encryptedWallet: KeyStore[], password: string): Promise<Account[]>;
    save(password: string, keyName?: string): Promise<boolean>;
}
