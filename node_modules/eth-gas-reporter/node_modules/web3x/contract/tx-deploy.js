"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("util");
const promievent_1 = require("../promievent");
const abi_1 = require("./abi");
const utils_1 = require("../utils");
const formatters_1 = require("../formatters");
/**
 * returns the an object with call, send, estimate functions
 *
 * @method _createTxObject
 * @returns {Object} an object with functions to call the methods
 */
class TxDeploy {
    constructor(eth, definition, deployData, args = [], defaultOptions = {}, wallet, extraFormatters) {
        this.eth = eth;
        this.definition = definition;
        this.deployData = deployData;
        this.args = args;
        this.defaultOptions = defaultOptions;
        this.wallet = wallet;
        this.extraFormatters = extraFormatters;
        if (this.defaultOptions.from) {
            this.defaultOptions.from = utils_1.toChecksumAddress(formatters_1.inputAddressFormatter(this.defaultOptions.from));
        }
    }
    estimateGas(options = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.eth.estimateGas(this.getTx(options));
        });
    }
    send(options) {
        const tx = this.getTx(options);
        if (util_1.isBoolean(this.definition.payable) && !this.definition.payable && tx.value && tx.value > 0) {
            const defer = promievent_1.promiEvent();
            return utils_1.fireError(new Error('Can not send value to non-payable contract method or constructor'), defer.eventEmitter, defer.reject);
        }
        const account = this.getAccount(tx.from);
        if (account) {
            return account.sendTransaction(tx, this.extraFormatters);
        }
        else {
            return this.eth.sendTransaction(tx, this.extraFormatters);
        }
    }
    getRequestPayload(options) {
        return this.eth.request.sendTransaction(this.getTx(options));
    }
    getAccount(address) {
        address = address || this.defaultOptions.from;
        if (this.wallet && address) {
            return this.wallet.get(address);
        }
    }
    getTx(options) {
        return {
            from: options.from ? utils_1.toChecksumAddress(formatters_1.inputAddressFormatter(options.from)) : this.defaultOptions.from,
            gasPrice: options.gasPrice || this.defaultOptions.gasPrice,
            gas: options.gas || this.defaultOptions.gas,
            value: options.value,
            data: this.encodeABI(),
        };
    }
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method encodeABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    encodeABI() {
        let paramsABI = abi_1.abi.encodeParameters(this.definition.inputs || [], this.args).replace('0x', '');
        return this.deployData + paramsABI;
    }
}
exports.TxDeploy = TxDeploy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHgtZGVwbG95LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnRyYWN0L3R4LWRlcGxveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7OztFQWVFOzs7QUFFRiwrQkFBaUM7QUFFakMsOENBQTJDO0FBQzNDLCtCQUE0QjtBQUM1QixvQ0FBd0Q7QUFDeEQsOENBQXNEO0FBdUJ0RDs7Ozs7R0FLRztBQUNILE1BQWEsUUFBUTtJQUNuQixZQUNVLEdBQVEsRUFDUixVQUF5QixFQUN6QixVQUFrQixFQUNsQixPQUFjLEVBQUUsRUFDaEIsaUJBQWlDLEVBQUUsRUFDbkMsTUFBZSxFQUNmLGVBQXFCO1FBTnJCLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDUixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ3pCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixtQkFBYyxHQUFkLGNBQWMsQ0FBcUI7UUFDbkMsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUNmLG9CQUFlLEdBQWYsZUFBZSxDQUFNO1FBRTdCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEdBQUcseUJBQWlCLENBQUMsa0NBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQy9GO0lBQ0gsQ0FBQztJQUVZLFdBQVcsQ0FBQyxVQUEyQixFQUFFOztZQUNwRCxPQUFPLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7S0FBQTtJQUVNLElBQUksQ0FBQyxPQUFvQjtRQUM5QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRS9CLElBQUksZ0JBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRTtZQUM5RixNQUFNLEtBQUssR0FBRyx1QkFBVSxFQUFFLENBQUM7WUFDM0IsT0FBTyxpQkFBUyxDQUNkLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLEVBQzdFLEtBQUssQ0FBQyxZQUFZLEVBQ2xCLEtBQUssQ0FBQyxNQUFNLENBQ2IsQ0FBQztTQUNIO1FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFekMsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLE9BQU8sQ0FBQyxlQUFlLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUMxRDthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUVNLGlCQUFpQixDQUFDLE9BQW9CO1FBQzNDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8sVUFBVSxDQUFDLE9BQWdCO1FBQ2pDLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDOUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVPLEtBQUssQ0FBQyxPQUFPO1FBQ25CLE9BQU87WUFDTCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMseUJBQWlCLENBQUMsa0NBQXFCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSTtZQUN0RyxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVE7WUFDMUQsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHO1lBQzNDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSztZQUNwQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtTQUN2QixDQUFDO0lBQ0osQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFDSSxTQUFTO1FBQ2QsSUFBSSxTQUFTLEdBQUcsU0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoRyxPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQXhFRCw0QkF3RUMifQ==