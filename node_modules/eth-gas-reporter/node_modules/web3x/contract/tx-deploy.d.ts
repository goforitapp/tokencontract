import { AbiDefinition } from '.';
import { Eth, SendTxPromiEvent } from '../eth';
import { Wallet } from '../wallet';
interface SendOptions {
    from: string;
    gasPrice?: string | number;
    gas?: number;
    value?: number | string;
}
interface EstimateOptions {
    from?: string;
    gasPrice?: string;
    value?: number | string;
}
declare type DefaultOptions = {
    from?: string;
    gasPrice?: string;
    gas?: number;
};
/**
 * returns the an object with call, send, estimate functions
 *
 * @method _createTxObject
 * @returns {Object} an object with functions to call the methods
 */
export declare class TxDeploy {
    private eth;
    private definition;
    private deployData;
    private args;
    private defaultOptions;
    private wallet?;
    private extraFormatters?;
    constructor(eth: Eth, definition: AbiDefinition, deployData: string, args?: any[], defaultOptions?: DefaultOptions, wallet?: Wallet | undefined, extraFormatters?: any);
    estimateGas(options?: EstimateOptions): Promise<number>;
    send(options: SendOptions): SendTxPromiEvent;
    getRequestPayload(options: SendOptions): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    private getAccount;
    private getTx;
    /**
     * Encodes an ABI for a method, including signature or the method.
     * Or when constructor encodes only the constructor parameters.
     *
     * @method encodeABI
     * @param {Mixed} args the arguments to encode
     * @param {String} the encoded ABI
     */
    encodeABI(): string;
}
export {};
