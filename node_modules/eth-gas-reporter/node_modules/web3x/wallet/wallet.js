"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("util");
const account_1 = require("../account");
const encryption_1 = require("../utils/encryption");
class Wallet {
    constructor() {
        this.length = 0;
        this.accounts = [];
    }
    static fromKeystores(encryptedWallet, password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const wallet = new Wallet();
            yield wallet.decrypt(encryptedWallet, password);
            return wallet;
        });
    }
    static fromLocalStorage(password, keyName = this.defaultKeyName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!localStorage) {
                return new Wallet();
            }
            const keystoreStr = localStorage.getItem(keyName);
            if (!keystoreStr) {
                return new Wallet();
            }
            try {
                return Wallet.fromKeystores(JSON.parse(keystoreStr), password);
            }
            catch (e) {
                return new Wallet();
            }
        });
    }
    findSafeIndex(pointer = 0) {
        while (this.accounts[pointer]) {
            ++pointer;
        }
        return pointer;
    }
    currentIndexes() {
        const keys = Object.keys(this.accounts);
        return keys.map(key => +key);
    }
    create(numberOfAccounts, entropy) {
        for (var i = 0; i < numberOfAccounts; ++i) {
            this.add(account_1.Account.create(entropy).privateKey);
        }
        return this.accounts;
    }
    get(addressOrIndex) {
        if (util_1.isString(addressOrIndex)) {
            return this.accounts.find(a => a && a.address.toLowerCase() === addressOrIndex.toLowerCase());
        }
        return this.accounts[addressOrIndex];
    }
    indexOf(addressOrIndex) {
        if (util_1.isString(addressOrIndex)) {
            return this.accounts.findIndex(a => a.address.toLowerCase() === addressOrIndex.toLowerCase());
        }
        return addressOrIndex;
    }
    add(accountOrKey) {
        if (Buffer.isBuffer(accountOrKey)) {
            accountOrKey = account_1.Account.fromPrivate(accountOrKey);
        }
        else {
            accountOrKey = account_1.Account.fromPrivate(accountOrKey.privateKey);
        }
        const existing = this.get(accountOrKey.address);
        if (existing) {
            return existing;
        }
        const index = this.findSafeIndex();
        this.accounts[index] = accountOrKey;
        this.length++;
        return accountOrKey;
    }
    remove(addressOrIndex) {
        const index = this.indexOf(addressOrIndex);
        if (index == -1) {
            return false;
        }
        this.accounts[index].privateKey = Buffer.of();
        delete this.accounts[index];
        this.length--;
        return true;
    }
    clear() {
        var indexes = this.currentIndexes();
        indexes.forEach(index => {
            this.remove(index);
        });
    }
    encrypt(password, options) {
        return Promise.all(this.currentIndexes().map(index => this.accounts[index].encrypt(password, options)));
    }
    decrypt(encryptedWallet, password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const decrypted = yield Promise.all(encryptedWallet.map(keystore => encryption_1.decrypt(keystore, password)));
            decrypted.forEach(account => {
                if (!account) {
                    throw new Error("Couldn't decrypt accounts. Password wrong?");
                }
                this.add(account);
            });
            return this.accounts;
        });
    }
    save(password, keyName = Wallet.defaultKeyName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!localStorage) {
                return false;
            }
            localStorage.setItem(keyName, JSON.stringify(yield this.encrypt(password)));
            return true;
        });
    }
}
Wallet.defaultKeyName = 'web3js_wallet';
exports.Wallet = Wallet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3dhbGxldC93YWxsZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsK0JBQWdDO0FBQ2hDLHdDQUFxQztBQUNyQyxvREFBd0Q7QUFFeEQsTUFBYSxNQUFNO0lBS2pCO1FBSE8sV0FBTSxHQUFXLENBQUMsQ0FBQztRQUNuQixhQUFRLEdBQWMsRUFBRSxDQUFDO0lBRWpCLENBQUM7SUFFaEIsTUFBTSxDQUFPLGFBQWEsQ0FBQyxlQUEyQixFQUFFLFFBQWdCOztZQUN0RSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1lBQzVCLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDaEQsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFPLGdCQUFnQixDQUFDLFFBQWdCLEVBQUUsVUFBa0IsSUFBSSxDQUFDLGNBQWM7O1lBQ25GLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQzthQUNyQjtZQUVELE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFbEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsT0FBTyxJQUFJLE1BQU0sRUFBRSxDQUFDO2FBQ3JCO1lBRUQsSUFBSTtnQkFDRixPQUFPLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUNoRTtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQzthQUNyQjtRQUNILENBQUM7S0FBQTtJQUVPLGFBQWEsQ0FBQyxVQUFrQixDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFB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