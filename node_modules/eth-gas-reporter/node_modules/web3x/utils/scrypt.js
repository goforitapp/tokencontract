"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const pbkdf2_1 = require("./pbkdf2");
const MAX_VALUE = 0x7fffffff;
// The following is an adaptation of scryptsy
// See: https://www.npmjs.com/package/scryptsy
function blockmix_salsa8(BY, Yi, r, x, _X) {
    var i;
    arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
    for (i = 0; i < 2 * r; i++) {
        blockxor(BY, i * 16, _X, 16);
        salsa20_8(_X, x);
        arraycopy(_X, 0, BY, Yi + i * 16, 16);
    }
    for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);
    }
    for (i = 0; i < r; i++) {
        arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
    }
}
function R(a, b) {
    return (a << b) | (a >>> (32 - b));
}
function salsa20_8(B, x) {
    arraycopy(B, 0, x, 0, 16);
    for (var i = 8; i > 0; i -= 2) {
        x[4] ^= R(x[0] + x[12], 7);
        x[8] ^= R(x[4] + x[0], 9);
        x[12] ^= R(x[8] + x[4], 13);
        x[0] ^= R(x[12] + x[8], 18);
        x[9] ^= R(x[5] + x[1], 7);
        x[13] ^= R(x[9] + x[5], 9);
        x[1] ^= R(x[13] + x[9], 13);
        x[5] ^= R(x[1] + x[13], 18);
        x[14] ^= R(x[10] + x[6], 7);
        x[2] ^= R(x[14] + x[10], 9);
        x[6] ^= R(x[2] + x[14], 13);
        x[10] ^= R(x[6] + x[2], 18);
        x[3] ^= R(x[15] + x[11], 7);
        x[7] ^= R(x[3] + x[15], 9);
        x[11] ^= R(x[7] + x[3], 13);
        x[15] ^= R(x[11] + x[7], 18);
        x[1] ^= R(x[0] + x[3], 7);
        x[2] ^= R(x[1] + x[0], 9);
        x[3] ^= R(x[2] + x[1], 13);
        x[0] ^= R(x[3] + x[2], 18);
        x[6] ^= R(x[5] + x[4], 7);
        x[7] ^= R(x[6] + x[5], 9);
        x[4] ^= R(x[7] + x[6], 13);
        x[5] ^= R(x[4] + x[7], 18);
        x[11] ^= R(x[10] + x[9], 7);
        x[8] ^= R(x[11] + x[10], 9);
        x[9] ^= R(x[8] + x[11], 13);
        x[10] ^= R(x[9] + x[8], 18);
        x[12] ^= R(x[15] + x[14], 7);
        x[13] ^= R(x[12] + x[15], 9);
        x[14] ^= R(x[13] + x[12], 13);
        x[15] ^= R(x[14] + x[13], 18);
    }
    for (i = 0; i < 16; ++i) {
        B[i] += x[i];
    }
}
// naive approach... going back to loop unrolling may yield additional performance
function blockxor(S, Si, D, len) {
    for (var i = 0; i < len; i++) {
        D[i] ^= S[Si + i];
    }
}
function arraycopy(src, srcPos, dest, destPos, length) {
    while (length--) {
        dest[destPos++] = src[srcPos++];
    }
}
function ensureInteger(value, name) {
    var intValue = parseInt(value);
    if (value != intValue) {
        throw new Error('invalid ' + name);
    }
    return intValue;
}
// N = Cpu cost, r = Memory cost, p = parallelization cost
// callback(error, progress, key)
function scrypt(password, salt, N, r, p, dkLen, callback) {
    return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        N = ensureInteger(N, 'N');
        r = ensureInteger(r, 'r');
        p = ensureInteger(p, 'p');
        dkLen = ensureInteger(dkLen, 'dkLen');
        if (N === 0 || (N & (N - 1)) !== 0) {
            reject(new Error('N must be power of 2'));
        }
        if (N > MAX_VALUE / 128 / r) {
            reject(new Error('N too large'));
        }
        if (r > MAX_VALUE / 128 / p) {
            reject(new Error('r too large'));
        }
        var b = [...(yield pbkdf2_1.pbkdf2(password, salt, 1, p * 128 * r))];
        var B = new Uint32Array(p * 32 * r);
        for (var i = 0; i < B.length; i++) {
            var j = i * 4;
            B[i] =
                ((b[j + 3] & 0xff) << 24) | ((b[j + 2] & 0xff) << 16) | ((b[j + 1] & 0xff) << 8) | ((b[j + 0] & 0xff) << 0);
        }
        var XY = new Uint32Array(64 * r);
        var V = new Uint32Array(32 * r * N);
        var Yi = 32 * r;
        // scratch space
        var x = new Uint32Array(16); // salsa20_8
        var _X = new Uint32Array(16); // blockmix_salsa8
        var totalOps = p * N * 2;
        var currentOp = 0;
        var lastPercent10 = null;
        // Set this to true to abandon the scrypt on the next step
        var stop = false;
        // State information
        var state = 0;
        var i0 = 0, i1;
        var Bi;
        // How many blockmix_salsa8 can we do per step?
        var limit = Math.trunc(1000 / r);
        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
        var nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout;
        // This is really all I changed; making scryptsy a state machine so we occasionally
        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
        var incrementalSMix = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (stop) {
                    if (callback) {
                        callback(currentOp / totalOps);
                    }
                    reject(new Error('cancelled'));
                    return;
                }
                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;
                        arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1
                        state = 1; // Move to ROMix 2
                        i1 = 0;
                    // Fall through
                    case 1:
                        // Run up to 1000 steps of the first inner smix loop
                        var steps = N - i1;
                        if (steps > limit) {
                            steps = limit;
                        }
                        for (var i = 0; i < steps; i++) {
                            // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi); // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4
                        }
                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;
                        // Call the callback with the progress (optionally stopping us)
                        var percent10 = Math.trunc((1000 * currentOp) / totalOps);
                        if (percent10 !== lastPercent10) {
                            if (callback) {
                                stop = callback(currentOp / totalOps);
                            }
                            if (stop) {
                                break;
                            }
                            lastPercent10 = percent10;
                        }
                        if (i1 < N) {
                            break;
                        }
                        i1 = 0; // Move to ROMix 6
                        state = 2;
                    // Fall through
                    case 2:
                        // Run up to 1000 steps of the second inner smix loop
                        var steps = N - i1;
                        if (steps > limit) {
                            steps = limit;
                        }
                        for (var i = 0; i < steps; i++) {
                            // ROMix - 6
                            var offset = (2 * r - 1) * 16; // ROMix - 7
                            var j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)
                        }
                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;
                        // Call the callback with the progress (optionally stopping us)
                        var percent10 = Math.trunc((1000 * currentOp) / totalOps);
                        if (percent10 !== lastPercent10) {
                            if (callback) {
                                stop = callback(currentOp / totalOps);
                            }
                            if (stop) {
                                break;
                            }
                            lastPercent10 = percent10;
                        }
                        if (i1 < N) {
                            break;
                        }
                        arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10
                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }
                        b = [];
                        for (var i = 0; i < B.length; i++) {
                            b.push((B[i] >> 0) & 0xff);
                            b.push((B[i] >> 8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }
                        var derivedKey = yield pbkdf2_1.pbkdf2(password, Buffer.from(b), 1, dkLen);
                        // Done; don't break (which would reschedule)
                        if (callback) {
                            callback(1.0);
                        }
                        resolve(derivedKey);
                        return;
                }
                // Schedule the next steps
                nextTick(incrementalSMix);
            });
        };
        // Bootstrap the incremental smix
        incrementalSMix();
    }));
}
exports.scrypt = scrypt;
//# sourceMappingURL=data:application/json;base64,