"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const subscriptions_1 = require("../subscriptions");
class Shh {
    constructor(provider) {
        this.provider = provider;
        this.request = new ShhRequestPayloads();
    }
    send({ method, params, format }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return format(yield this.provider.send(method, params));
        });
    }
    getVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getVersion();
            return payload.format(yield this.send(payload));
        });
    }
    getInfo() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getInfo();
            return payload.format(yield this.send(payload));
        });
    }
    setMaxMessageSize(size) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.setMaxMessageSize(size);
            return payload.format(yield this.send(payload));
        });
    }
    setMinPoW(pow) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.setMinPoW(pow);
            return payload.format(yield this.send(payload));
        });
    }
    markTrustedPeer(enode) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.markTrustedPeer(enode);
            return payload.format(yield this.send(payload));
        });
    }
    newKeyPair() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.newKeyPair();
            return payload.format(yield this.send(payload));
        });
    }
    addPrivateKey(privateKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.addPrivateKey(privateKey);
            return payload.format(yield this.send(payload));
        });
    }
    deleteKeyPair(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.deleteKeyPair(id);
            return payload.format(yield this.send(payload));
        });
    }
    hasKeyPair(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.hasKeyPair(id);
            return payload.format(yield this.send(payload));
        });
    }
    getPublicKey(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getPublicKey(id);
            return payload.format(yield this.send(payload));
        });
    }
    getPrivateKey(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getPrivateKey(id);
            return payload.format(yield this.send(payload));
        });
    }
    newSymKey() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.newSymKey();
            return payload.format(yield this.send(payload));
        });
    }
    addSymKey(symKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.addSymKey(symKey);
            return payload.format(yield this.send(payload));
        });
    }
    generateSymKeyFromPassword(password) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.generateSymKeyFromPassword(password);
            return payload.format(yield this.send(payload));
        });
    }
    hasSymKey(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.hasSymKey(id);
            return payload.format(yield this.send(payload));
        });
    }
    getSymKey(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getSymKey(id);
            return payload.format(yield this.send(payload));
        });
    }
    deleteSymKey(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.deleteSymKey(id);
            return payload.format(yield this.send(payload));
        });
    }
    newMessageFilter(options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.newMessageFilter(options);
            return payload.format(yield this.send(payload));
        });
    }
    getFilterMessages(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.getFilterMessages(id);
            return payload.format(yield this.send(payload));
        });
    }
    deleteMessageFilter(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.deleteMessageFilter(id);
            return payload.format(yield this.send(payload));
        });
    }
    post(post) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const payload = this.request.post(post);
            return payload.format(yield this.send(payload));
        });
    }
    subscribeMessages(options) {
        const subscription = new subscriptions_1.Subscription('shh', 'messages', [options], this.provider);
        subscription.on('rawdata', message => subscription.emit('data', message));
        subscription.subscribe();
        return subscription;
    }
    subscribe(type, options) {
        switch (type) {
            case 'messages':
                return this.subscribeMessages(options);
            default:
                throw new Error(`Unknown subscription type: ${type}`);
        }
    }
}
exports.Shh = Shh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NoaC9zaGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYsb0RBQWdEO0FBR2hELE1BQWEsR0FBRztJQUdkLFlBQW9CLFFBQTBCO1FBQTFCLGFBQVEsR0FBUixRQUFRLENBQWtCO1FBRjlCLFlBQU8sR0FBRyxJQUFJLGtCQUFrQixFQUFFLENBQUM7SUFFRixDQUFDO0lBRXBDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFtRDs7WUFDNUYsT0FBTyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUMxRCxDQUFDO0tBQUE7SUFFSyxVQUFVOztZQUNkLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDMUMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FBQTtJQUVLLE9BQU87O1lBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN2QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQztLQUFBO0lBRUssaUJBQWlCLENBQUMsSUFBWTs7WUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyRCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQztL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