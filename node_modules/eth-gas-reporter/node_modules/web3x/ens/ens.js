"use strict";
/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("./config");
const registry_1 = require("./registry");
const namehash_1 = require("./registry/namehash");
const net_1 = require("../net");
/**
 * Constructs a new instance of ENS
 *
 * @method ENS
 * @param {Object} eth
 * @constructor
 */
class ENS {
    constructor(eth) {
        this.eth = eth;
        this.registry = new registry_1.Registry(this);
        this.net = new net_1.Net(eth);
    }
    getRegistry() {
        return this.registry;
    }
    /**
     * @param {string} name
     * @returns {Promise<Contract>}
     */
    getResolver(name) {
        return this.registry.resolver(name);
    }
    /**
     * Returns the address record associated with a name.
     *
     * @method getAddress
     * @param {string} name
     * @param {function} callback
     * @return {eventifiedPromise}
     */
    getAddress(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.addr(namehash_1.namehash(name)).call();
        });
    }
    /**
     * Sets a new address
     *
     * @method setAddress
     * @param {string} name
     * @param {string} address
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    setAddress(name, address, sendOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.setAddr(namehash_1.namehash(name), address).send(sendOptions);
        });
    }
    /**
     * Returns the public key
     *
     * @method getPubkey
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    getPubkey(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.pubkey(namehash_1.namehash(name)).call();
        });
    }
    /**
     * Set the new public key
     *
     * @method setPubkey
     * @param {string} name
     * @param {string} x
     * @param {string} y
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    setPubkey(name, x, y, sendOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.setPubkey(namehash_1.namehash(name), x, y).send(sendOptions);
        });
    }
    /**
     * Returns the content
     *
     * @method getContent
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    getContent(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.content(namehash_1.namehash(name)).call();
        });
    }
    /**
     * Set the content
     *
     * @method setContent
     * @param {string} name
     * @param {string} hash
     * @param {function} callback
     * @param {Object} sendOptions
     * @returns {eventifiedPromise}
     */
    setContent(name, hash, sendOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.setContent(namehash_1.namehash(name), hash).send(sendOptions);
        });
    }
    /**
     * Get the multihash
     *
     * @method getMultihash
     * @param {string} name
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    getMultihash(name) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.multihash(namehash_1.namehash(name)).call();
        });
    }
    /**
     * Set the multihash
     *
     * @method setMultihash
     * @param {string} name
     * @param {string} hash
     * @param {Object} sendOptions
     * @param {function} callback
     * @returns {eventifiedPromise}
     */
    setMultihash(name, hash, sendOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const resolver = yield this.registry.resolver(name);
            return yield resolver.methods.setMultihash(namehash_1.namehash(name), hash).send(sendOptions);
        });
    }
    /**
     * Checks if the current used network is synced and looks for ENS support there.
     * Throws an error if not.
     *
     * @returns {Promise<Block>}
     */
    checkNetwork() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const block = yield this.eth.getBlock('latest');
            const headAge = new Date().getTime() / 1000 - block.timestamp;
            if (headAge > 3600) {
                throw new Error('Network not synced; last block was ' + headAge + ' seconds ago');
            }
            const networkType = yield this.net.getNetworkType();
            const addr = config_1.config.addresses[networkType];
            if (typeof addr === 'undefined') {
                throw new Error('ENS is not supported on network ' + networkType);
            }
            return addr;
        });
    }
}
exports.ENS = ENS;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Vucy9lbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7RUFlRTs7O0FBRUYscUNBQWtDO0FBQ2xDLHlDQUFzQztBQUV0QyxrREFBK0M7QUFHL0MsZ0NBQTZCO0FBRTdCOzs7Ozs7R0FNRztBQUNILE1BQWEsR0FBRztJQUlkLFlBQXFCLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBSHJCLGFBQVEsR0FBRyxJQUFJLG1CQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFJcEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLFNBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVyxDQUFDLElBQVk7UUFDdEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNHLFVBQVUsQ0FBQyxJQUFZOztZQUMzQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELE9BQU8sTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDNUQsQ0FBQztLQUFBO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0csVUFBVSxDQUFDLElBQVksRUFBRSxPQUFnQixFQUFFLFdBQXdCOztZQUN2RSxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BELE9BQU8sTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFD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