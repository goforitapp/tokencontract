import { hexToNumber } from '../utils';
import { outputSyncingFormatter, outputBigNumberFormatter, outputBlockFormatter, outputTransactionFormatter, outputTransactionReceiptFormatter, GetLogOptions } from '../formatters';
import { TransactionHash } from '../types';
import { Data, Address } from '../types';
import { BlockType, BlockHash } from './block';
import { Tx } from './tx';
export declare class EthRequestPayloads {
    private defaultFromAddress?;
    private defaultBlock;
    constructor(defaultFromAddress?: string | undefined, defaultBlock?: BlockType);
    getDefaultFromAddress(): string | undefined;
    setDefaultFromAddress(address?: Address): void;
    getDefaultBlock(): BlockType;
    setDefaultBlock(block: BlockType): void;
    getId(): {
        method: string;
        format: typeof hexToNumber;
    };
    getNodeInfo(): {
        method: string;
        format: (result: any) => any;
    };
    getProtocolVersion(): {
        method: string;
        format: (result: any) => any;
    };
    getCoinbase(): {
        method: string;
        format: (result: any) => any;
    };
    isMining(): {
        method: string;
        format: (result: any) => any;
    };
    getHashrate(): {
        method: string;
        format: typeof hexToNumber;
    };
    isSyncing(): {
        method: string;
        format: typeof outputSyncingFormatter;
    };
    getGasPrice(): {
        method: string;
        format: typeof outputBigNumberFormatter;
    };
    getAccounts(): {
        method: string;
        format: (result: any) => any;
    };
    getBlockNumber(): {
        method: string;
        format: typeof hexToNumber;
    };
    getBalance(address: Address, block?: BlockType): {
        method: string;
        params: (string | undefined)[];
        format: typeof outputBigNumberFormatter;
    };
    getStorageAt(address: Address, position: string, block?: BlockType): {
        method: string;
        params: (string | undefined)[];
        format: (result: any) => any;
    };
    getCode(address: Address, block?: BlockType): {
        method: string;
        params: (string | undefined)[];
        format: (result: any) => any;
    };
    getBlock(block: BlockType | BlockHash, returnTransactionObjects?: boolean): {
        method: string;
        params: (string | boolean | undefined)[];
        format: typeof outputBlockFormatter;
    };
    getUncle(block: BlockType | BlockHash, uncleIndex: number, returnTransactionObjects?: boolean): {
        method: string;
        params: (string | boolean | undefined)[];
        format: typeof outputBlockFormatter;
    };
    getBlockTransactionCount(block: BlockType | BlockHash): {
        method: string;
        params: (string | undefined)[];
        format: typeof hexToNumber;
    };
    getBlockUncleCount(block: BlockType | BlockHash): {
        method: string;
        params: (string | undefined)[];
        format: typeof hexToNumber;
    };
    getTransaction(hash: TransactionHash): {
        method: string;
        params: string[];
        format: typeof outputTransactionFormatter;
    };
    getTransactionFromBlock(block: BlockType | BlockHash, index: number): {
        method: string;
        params: (string | undefined)[];
        format: typeof outputTransactionFormatter;
    };
    getTransactionReceipt(hash: TransactionHash): {
        method: string;
        params: string[];
        format: typeof outputTransactionReceiptFormatter;
    };
    getTransactionCount(address: Address, block?: BlockType): {
        method: string;
        params: (string | undefined)[];
        format: typeof hexToNumber;
    };
    signTransaction(tx: Tx): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    sendSignedTransaction(data: Data): {
        method: string;
        params: string[];
        format: (result: any) => any;
    };
    sendTransaction(tx: Tx): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    sign(address: Address, dataToSign: Data): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    signTypedData(address: Address, dataToSign: {
        type: string;
        name: string;
        value: string;
    }[]): {
        method: string;
        params: (string | {
            type: string;
            name: string;
            value: string;
        }[])[];
        format: (result: any) => any;
    };
    call(callObject: Tx, block?: BlockType, outputFormatter?: (result: any) => any): {
        method: string;
        params: any[];
        format: (result: any) => any;
    };
    estimateGas(tx: Tx): {
        method: string;
        params: any[];
        format: typeof hexToNumber;
    };
    submitWork(nonce: string, powHash: string, digest: string): {
        method: string;
        params: string[];
        format: (result: any) => any;
    };
    getWork(): {
        method: string;
        format: (result: any) => any;
    };
    getPastLogs(options: GetLogOptions): {
        method: string;
        params: import("../formatters").FormattedGetLogOptions[];
        format: (result: any) => any;
    };
    private resolveBlock;
}
