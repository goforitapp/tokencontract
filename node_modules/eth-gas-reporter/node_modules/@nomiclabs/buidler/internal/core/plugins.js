"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const semver = __importStar(require("semver"));
const context_1 = require("../context");
const caller_package_1 = require("../util/caller-package");
const errors_1 = require("./errors");
function usePlugin(pluginName) {
    const ctx = context_1.BuidlerContext.getBuidlerContext();
    const configFileDir = path.dirname(ctx.configPath);
    const pluginPackageJson = readPackageJson(pluginName, configFileDir);
    if (pluginPackageJson === undefined) {
        throw new errors_1.BuidlerError(errors_1.ERRORS.PLUGINS.NOT_INSTALLED, pluginName);
    }
    if (pluginPackageJson.peerDependencies !== undefined) {
        for (const [dependencyName, versionSpec] of Object.entries(pluginPackageJson.peerDependencies)) {
            const dependencyPackageJson = readPackageJson(dependencyName, configFileDir);
            if (dependencyPackageJson === undefined) {
                throw new errors_1.BuidlerError(errors_1.ERRORS.PLUGINS.MISSING_DEPENDENCY, pluginName, dependencyName, dependencyName, versionSpec);
            }
            const installedVersion = dependencyPackageJson.version;
            if (!semver.satisfies(installedVersion, versionSpec)) {
                throw new errors_1.BuidlerError(errors_1.ERRORS.PLUGINS.DEPENDENCY_VERSION_MISMATCH, pluginName, dependencyName, versionSpec, installedVersion, dependencyName, dependencyName, versionSpec, dependencyName);
            }
        }
    }
    const pluginPath = require.resolve(pluginName, { paths: [configFileDir] });
    loadPluginFile(pluginPath);
}
exports.usePlugin = usePlugin;
function loadPluginFile(absolutePluginFilePath) {
    const imported = require(absolutePluginFilePath);
    const plugin = imported.default !== undefined ? imported.default : imported;
    if (typeof plugin === "function") {
        plugin();
    }
}
exports.loadPluginFile = loadPluginFile;
function readPackageJson(packageName, from) {
    try {
        const packageJsonPath = require.resolve(path.join(packageName, "package.json"), {
            paths: [from]
        });
        return require(packageJsonPath);
    }
    catch (error) {
        return undefined;
    }
}
exports.readPackageJson = readPackageJson;
function ensurePluginLoadedWithUsePlugin() {
    const previousPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (e, s) => s;
    const error = new Error();
    const stack = error.stack;
    Error.prepareStackTrace = previousPrepareStackTrace;
    for (const callSite of stack) {
        const fileName = callSite.getFileName();
        const functionName = callSite.getFunctionName();
        if (fileName === __filename && functionName === loadPluginFile.name) {
            return;
        }
    }
    const pluginName = caller_package_1.getClosestCallerPackage();
    throw new errors_1.BuidlerError(errors_1.ERRORS.PLUGINS.OLD_STYLE_IMPORT_DETECTED, pluginName !== undefined ? pluginName : "a plugin", pluginName !== undefined ? pluginName : "plugin-name");
}
exports.ensurePluginLoadedWithUsePlugin = ensurePluginLoadedWithUsePlugin;
//# sourceMappingURL=plugins.js.map